//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace gui {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DsPwaPrintReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DsPwaPrintReport : global::System.Data.DataSet {
        
        private ClinicalTableDataTable tableClinicalTable;
        
        private PatientTableDataTable tablePatientTable;
        
        private ClinicalAnalysisTableDataTable tableClinicalAnalysisTable;
        
        private QuickStartTableDataTable tableQuickStartTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DsPwaPrintReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DsPwaPrintReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClinicalTable"] != null)) {
                    base.Tables.Add(new ClinicalTableDataTable(ds.Tables["ClinicalTable"]));
                }
                if ((ds.Tables["PatientTable"] != null)) {
                    base.Tables.Add(new PatientTableDataTable(ds.Tables["PatientTable"]));
                }
                if ((ds.Tables["ClinicalAnalysisTable"] != null)) {
                    base.Tables.Add(new ClinicalAnalysisTableDataTable(ds.Tables["ClinicalAnalysisTable"]));
                }
                if ((ds.Tables["QuickStartTable"] != null)) {
                    base.Tables.Add(new QuickStartTableDataTable(ds.Tables["QuickStartTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClinicalTableDataTable ClinicalTable {
            get {
                return this.tableClinicalTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatientTableDataTable PatientTable {
            get {
                return this.tablePatientTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClinicalAnalysisTableDataTable ClinicalAnalysisTable {
            get {
                return this.tableClinicalAnalysisTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuickStartTableDataTable QuickStartTable {
            get {
                return this.tableQuickStartTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DsPwaPrintReport cln = ((DsPwaPrintReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClinicalTable"] != null)) {
                    base.Tables.Add(new ClinicalTableDataTable(ds.Tables["ClinicalTable"]));
                }
                if ((ds.Tables["PatientTable"] != null)) {
                    base.Tables.Add(new PatientTableDataTable(ds.Tables["PatientTable"]));
                }
                if ((ds.Tables["ClinicalAnalysisTable"] != null)) {
                    base.Tables.Add(new ClinicalAnalysisTableDataTable(ds.Tables["ClinicalAnalysisTable"]));
                }
                if ((ds.Tables["QuickStartTable"] != null)) {
                    base.Tables.Add(new QuickStartTableDataTable(ds.Tables["QuickStartTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClinicalTable = ((ClinicalTableDataTable)(base.Tables["ClinicalTable"]));
            if ((initTable == true)) {
                if ((this.tableClinicalTable != null)) {
                    this.tableClinicalTable.InitVars();
                }
            }
            this.tablePatientTable = ((PatientTableDataTable)(base.Tables["PatientTable"]));
            if ((initTable == true)) {
                if ((this.tablePatientTable != null)) {
                    this.tablePatientTable.InitVars();
                }
            }
            this.tableClinicalAnalysisTable = ((ClinicalAnalysisTableDataTable)(base.Tables["ClinicalAnalysisTable"]));
            if ((initTable == true)) {
                if ((this.tableClinicalAnalysisTable != null)) {
                    this.tableClinicalAnalysisTable.InitVars();
                }
            }
            this.tableQuickStartTable = ((QuickStartTableDataTable)(base.Tables["QuickStartTable"]));
            if ((initTable == true)) {
                if ((this.tableQuickStartTable != null)) {
                    this.tableQuickStartTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DsPwaPrintReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DsPwaPrintReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClinicalTable = new ClinicalTableDataTable();
            base.Tables.Add(this.tableClinicalTable);
            this.tablePatientTable = new PatientTableDataTable();
            base.Tables.Add(this.tablePatientTable);
            this.tableClinicalAnalysisTable = new ClinicalAnalysisTableDataTable();
            base.Tables.Add(this.tableClinicalAnalysisTable);
            this.tableQuickStartTable = new QuickStartTableDataTable();
            base.Tables.Add(this.tableQuickStartTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClinicalTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePatientTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClinicalAnalysisTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuickStartTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DsPwaPrintReport ds = new DsPwaPrintReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClinicalTableRowChangeEventHandler(object sender, ClinicalTableRowChangeEvent e);
        
        public delegate void PatientTableRowChangeEventHandler(object sender, PatientTableRowChangeEvent e);
        
        public delegate void ClinicalAnalysisTableRowChangeEventHandler(object sender, ClinicalAnalysisTableRowChangeEvent e);
        
        public delegate void QuickStartTableRowChangeEventHandler(object sender, QuickStartTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClinicalTableDataTable : global::System.Data.TypedTableBase<ClinicalTableRow> {
            
            private global::System.Data.DataColumn columnImageLogo;
            
            private global::System.Data.DataColumn columnClinicalParameter;
            
            private global::System.Data.DataColumn columnCentralPressureWaveform;
            
            private global::System.Data.DataColumn columnRawWaveformsChart;
            
            private global::System.Data.DataColumn columnRawMultiWaveformsChart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableDataTable() {
                this.TableName = "ClinicalTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClinicalTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClinicalTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageLogoColumn {
                get {
                    return this.columnImageLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClinicalParameterColumn {
                get {
                    return this.columnClinicalParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CentralPressureWaveformColumn {
                get {
                    return this.columnCentralPressureWaveform;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RawWaveformsChartColumn {
                get {
                    return this.columnRawWaveformsChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RawMultiWaveformsChartColumn {
                get {
                    return this.columnRawMultiWaveformsChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableRow this[int index] {
                get {
                    return ((ClinicalTableRow)(this.Rows[index]));
                }
            }
            
            public event ClinicalTableRowChangeEventHandler ClinicalTableRowChanging;
            
            public event ClinicalTableRowChangeEventHandler ClinicalTableRowChanged;
            
            public event ClinicalTableRowChangeEventHandler ClinicalTableRowDeleting;
            
            public event ClinicalTableRowChangeEventHandler ClinicalTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClinicalTableRow(ClinicalTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableRow AddClinicalTableRow(byte[] ImageLogo, byte[] ClinicalParameter, byte[] CentralPressureWaveform, byte[] RawWaveformsChart, byte[] RawMultiWaveformsChart) {
                ClinicalTableRow rowClinicalTableRow = ((ClinicalTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImageLogo,
                        ClinicalParameter,
                        CentralPressureWaveform,
                        RawWaveformsChart,
                        RawMultiWaveformsChart};
                rowClinicalTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClinicalTableRow);
                return rowClinicalTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClinicalTableDataTable cln = ((ClinicalTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClinicalTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageLogo = base.Columns["ImageLogo"];
                this.columnClinicalParameter = base.Columns["ClinicalParameter"];
                this.columnCentralPressureWaveform = base.Columns["CentralPressureWaveform"];
                this.columnRawWaveformsChart = base.Columns["RawWaveformsChart"];
                this.columnRawMultiWaveformsChart = base.Columns["RawMultiWaveformsChart"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageLogo = new global::System.Data.DataColumn("ImageLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageLogo);
                this.columnClinicalParameter = new global::System.Data.DataColumn("ClinicalParameter", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClinicalParameter);
                this.columnCentralPressureWaveform = new global::System.Data.DataColumn("CentralPressureWaveform", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCentralPressureWaveform);
                this.columnRawWaveformsChart = new global::System.Data.DataColumn("RawWaveformsChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRawWaveformsChart);
                this.columnRawMultiWaveformsChart = new global::System.Data.DataColumn("RawMultiWaveformsChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRawMultiWaveformsChart);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableRow NewClinicalTableRow() {
                return ((ClinicalTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClinicalTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClinicalTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClinicalTableRowChanged != null)) {
                    this.ClinicalTableRowChanged(this, new ClinicalTableRowChangeEvent(((ClinicalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClinicalTableRowChanging != null)) {
                    this.ClinicalTableRowChanging(this, new ClinicalTableRowChangeEvent(((ClinicalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClinicalTableRowDeleted != null)) {
                    this.ClinicalTableRowDeleted(this, new ClinicalTableRowChangeEvent(((ClinicalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClinicalTableRowDeleting != null)) {
                    this.ClinicalTableRowDeleting(this, new ClinicalTableRowChangeEvent(((ClinicalTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClinicalTableRow(ClinicalTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsPwaPrintReport ds = new DsPwaPrintReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClinicalTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PatientTableDataTable : global::System.Data.TypedTableBase<PatientTableRow> {
            
            private global::System.Data.DataColumn columnImageLogo;
            
            private global::System.Data.DataColumn columnImageHumanLogo;
            
            private global::System.Data.DataColumn columnSpSlider;
            
            private global::System.Data.DataColumn columnDpSlider;
            
            private global::System.Data.DataColumn columnHrSlider;
            
            private global::System.Data.DataColumn columnImageSpChart;
            
            private global::System.Data.DataColumn columnImageApChart;
            
            private global::System.Data.DataColumn columnImagePpChart;
            
            private global::System.Data.DataColumn columnImageAixChart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableDataTable() {
                this.TableName = "PatientTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PatientTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PatientTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageLogoColumn {
                get {
                    return this.columnImageLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageHumanLogoColumn {
                get {
                    return this.columnImageHumanLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpSliderColumn {
                get {
                    return this.columnSpSlider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DpSliderColumn {
                get {
                    return this.columnDpSlider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrSliderColumn {
                get {
                    return this.columnHrSlider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageSpChartColumn {
                get {
                    return this.columnImageSpChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageApChartColumn {
                get {
                    return this.columnImageApChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImagePpChartColumn {
                get {
                    return this.columnImagePpChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageAixChartColumn {
                get {
                    return this.columnImageAixChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableRow this[int index] {
                get {
                    return ((PatientTableRow)(this.Rows[index]));
                }
            }
            
            public event PatientTableRowChangeEventHandler PatientTableRowChanging;
            
            public event PatientTableRowChangeEventHandler PatientTableRowChanged;
            
            public event PatientTableRowChangeEventHandler PatientTableRowDeleting;
            
            public event PatientTableRowChangeEventHandler PatientTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPatientTableRow(PatientTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableRow AddPatientTableRow(byte[] ImageLogo, byte[] ImageHumanLogo, byte[] SpSlider, byte[] DpSlider, byte[] HrSlider, byte[] ImageSpChart, byte[] ImageApChart, byte[] ImagePpChart, byte[] ImageAixChart) {
                PatientTableRow rowPatientTableRow = ((PatientTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImageLogo,
                        ImageHumanLogo,
                        SpSlider,
                        DpSlider,
                        HrSlider,
                        ImageSpChart,
                        ImageApChart,
                        ImagePpChart,
                        ImageAixChart};
                rowPatientTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPatientTableRow);
                return rowPatientTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PatientTableDataTable cln = ((PatientTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PatientTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageLogo = base.Columns["ImageLogo"];
                this.columnImageHumanLogo = base.Columns["ImageHumanLogo"];
                this.columnSpSlider = base.Columns["SpSlider"];
                this.columnDpSlider = base.Columns["DpSlider"];
                this.columnHrSlider = base.Columns["HrSlider"];
                this.columnImageSpChart = base.Columns["ImageSpChart"];
                this.columnImageApChart = base.Columns["ImageApChart"];
                this.columnImagePpChart = base.Columns["ImagePpChart"];
                this.columnImageAixChart = base.Columns["ImageAixChart"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageLogo = new global::System.Data.DataColumn("ImageLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageLogo);
                this.columnImageHumanLogo = new global::System.Data.DataColumn("ImageHumanLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageHumanLogo);
                this.columnSpSlider = new global::System.Data.DataColumn("SpSlider", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpSlider);
                this.columnDpSlider = new global::System.Data.DataColumn("DpSlider", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDpSlider);
                this.columnHrSlider = new global::System.Data.DataColumn("HrSlider", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrSlider);
                this.columnImageSpChart = new global::System.Data.DataColumn("ImageSpChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageSpChart);
                this.columnImageApChart = new global::System.Data.DataColumn("ImageApChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageApChart);
                this.columnImagePpChart = new global::System.Data.DataColumn("ImagePpChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImagePpChart);
                this.columnImageAixChart = new global::System.Data.DataColumn("ImageAixChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageAixChart);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableRow NewPatientTableRow() {
                return ((PatientTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PatientTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PatientTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatientTableRowChanged != null)) {
                    this.PatientTableRowChanged(this, new PatientTableRowChangeEvent(((PatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatientTableRowChanging != null)) {
                    this.PatientTableRowChanging(this, new PatientTableRowChangeEvent(((PatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatientTableRowDeleted != null)) {
                    this.PatientTableRowDeleted(this, new PatientTableRowChangeEvent(((PatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatientTableRowDeleting != null)) {
                    this.PatientTableRowDeleting(this, new PatientTableRowChangeEvent(((PatientTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePatientTableRow(PatientTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsPwaPrintReport ds = new DsPwaPrintReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PatientTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClinicalAnalysisTableDataTable : global::System.Data.TypedTableBase<ClinicalAnalysisTableRow> {
            
            private global::System.Data.DataColumn columnImageLogo;
            
            private global::System.Data.DataColumn columnImageSpChart;
            
            private global::System.Data.DataColumn columnImagePpChart;
            
            private global::System.Data.DataColumn columnImageDpMapChart;
            
            private global::System.Data.DataColumn columnImageHeartRateChart;
            
            private global::System.Data.DataColumn columnImageApChart;
            
            private global::System.Data.DataColumn columnImageAixChart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableDataTable() {
                this.TableName = "ClinicalAnalysisTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClinicalAnalysisTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClinicalAnalysisTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageLogoColumn {
                get {
                    return this.columnImageLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageSpChartColumn {
                get {
                    return this.columnImageSpChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImagePpChartColumn {
                get {
                    return this.columnImagePpChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageDpMapChartColumn {
                get {
                    return this.columnImageDpMapChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageHeartRateChartColumn {
                get {
                    return this.columnImageHeartRateChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageApChartColumn {
                get {
                    return this.columnImageApChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageAixChartColumn {
                get {
                    return this.columnImageAixChart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableRow this[int index] {
                get {
                    return ((ClinicalAnalysisTableRow)(this.Rows[index]));
                }
            }
            
            public event ClinicalAnalysisTableRowChangeEventHandler ClinicalAnalysisTableRowChanging;
            
            public event ClinicalAnalysisTableRowChangeEventHandler ClinicalAnalysisTableRowChanged;
            
            public event ClinicalAnalysisTableRowChangeEventHandler ClinicalAnalysisTableRowDeleting;
            
            public event ClinicalAnalysisTableRowChangeEventHandler ClinicalAnalysisTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClinicalAnalysisTableRow(ClinicalAnalysisTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableRow AddClinicalAnalysisTableRow(byte[] ImageLogo, byte[] ImageSpChart, byte[] ImagePpChart, byte[] ImageDpMapChart, byte[] ImageHeartRateChart, byte[] ImageApChart, byte[] ImageAixChart) {
                ClinicalAnalysisTableRow rowClinicalAnalysisTableRow = ((ClinicalAnalysisTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImageLogo,
                        ImageSpChart,
                        ImagePpChart,
                        ImageDpMapChart,
                        ImageHeartRateChart,
                        ImageApChart,
                        ImageAixChart};
                rowClinicalAnalysisTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClinicalAnalysisTableRow);
                return rowClinicalAnalysisTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClinicalAnalysisTableDataTable cln = ((ClinicalAnalysisTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClinicalAnalysisTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageLogo = base.Columns["ImageLogo"];
                this.columnImageSpChart = base.Columns["ImageSpChart"];
                this.columnImagePpChart = base.Columns["ImagePpChart"];
                this.columnImageDpMapChart = base.Columns["ImageDpMapChart"];
                this.columnImageHeartRateChart = base.Columns["ImageHeartRateChart"];
                this.columnImageApChart = base.Columns["ImageApChart"];
                this.columnImageAixChart = base.Columns["ImageAixChart"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageLogo = new global::System.Data.DataColumn("ImageLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageLogo);
                this.columnImageSpChart = new global::System.Data.DataColumn("ImageSpChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageSpChart);
                this.columnImagePpChart = new global::System.Data.DataColumn("ImagePpChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImagePpChart);
                this.columnImageDpMapChart = new global::System.Data.DataColumn("ImageDpMapChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageDpMapChart);
                this.columnImageHeartRateChart = new global::System.Data.DataColumn("ImageHeartRateChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageHeartRateChart);
                this.columnImageApChart = new global::System.Data.DataColumn("ImageApChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageApChart);
                this.columnImageAixChart = new global::System.Data.DataColumn("ImageAixChart", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageAixChart);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableRow NewClinicalAnalysisTableRow() {
                return ((ClinicalAnalysisTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClinicalAnalysisTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClinicalAnalysisTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClinicalAnalysisTableRowChanged != null)) {
                    this.ClinicalAnalysisTableRowChanged(this, new ClinicalAnalysisTableRowChangeEvent(((ClinicalAnalysisTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClinicalAnalysisTableRowChanging != null)) {
                    this.ClinicalAnalysisTableRowChanging(this, new ClinicalAnalysisTableRowChangeEvent(((ClinicalAnalysisTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClinicalAnalysisTableRowDeleted != null)) {
                    this.ClinicalAnalysisTableRowDeleted(this, new ClinicalAnalysisTableRowChangeEvent(((ClinicalAnalysisTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClinicalAnalysisTableRowDeleting != null)) {
                    this.ClinicalAnalysisTableRowDeleting(this, new ClinicalAnalysisTableRowChangeEvent(((ClinicalAnalysisTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClinicalAnalysisTableRow(ClinicalAnalysisTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsPwaPrintReport ds = new DsPwaPrintReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClinicalAnalysisTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuickStartTableDataTable : global::System.Data.TypedTableBase<QuickStartTableRow> {
            
            private global::System.Data.DataColumn columnImageLogo;
            
            private global::System.Data.DataColumn columnImageDump;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableDataTable() {
                this.TableName = "QuickStartTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickStartTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuickStartTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageLogoColumn {
                get {
                    return this.columnImageLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageDumpColumn {
                get {
                    return this.columnImageDump;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableRow this[int index] {
                get {
                    return ((QuickStartTableRow)(this.Rows[index]));
                }
            }
            
            public event QuickStartTableRowChangeEventHandler QuickStartTableRowChanging;
            
            public event QuickStartTableRowChangeEventHandler QuickStartTableRowChanged;
            
            public event QuickStartTableRowChangeEventHandler QuickStartTableRowDeleting;
            
            public event QuickStartTableRowChangeEventHandler QuickStartTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuickStartTableRow(QuickStartTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableRow AddQuickStartTableRow(byte[] ImageLogo, byte[] ImageDump) {
                QuickStartTableRow rowQuickStartTableRow = ((QuickStartTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImageLogo,
                        ImageDump};
                rowQuickStartTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuickStartTableRow);
                return rowQuickStartTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuickStartTableDataTable cln = ((QuickStartTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuickStartTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageLogo = base.Columns["ImageLogo"];
                this.columnImageDump = base.Columns["ImageDump"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageLogo = new global::System.Data.DataColumn("ImageLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageLogo);
                this.columnImageDump = new global::System.Data.DataColumn("ImageDump", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageDump);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableRow NewQuickStartTableRow() {
                return ((QuickStartTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuickStartTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuickStartTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuickStartTableRowChanged != null)) {
                    this.QuickStartTableRowChanged(this, new QuickStartTableRowChangeEvent(((QuickStartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuickStartTableRowChanging != null)) {
                    this.QuickStartTableRowChanging(this, new QuickStartTableRowChangeEvent(((QuickStartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuickStartTableRowDeleted != null)) {
                    this.QuickStartTableRowDeleted(this, new QuickStartTableRowChangeEvent(((QuickStartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuickStartTableRowDeleting != null)) {
                    this.QuickStartTableRowDeleting(this, new QuickStartTableRowChangeEvent(((QuickStartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuickStartTableRow(QuickStartTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsPwaPrintReport ds = new DsPwaPrintReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuickStartTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClinicalTableRow : global::System.Data.DataRow {
            
            private ClinicalTableDataTable tableClinicalTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClinicalTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClinicalTable = ((ClinicalTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageLogo {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalTable.ImageLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageLogo\' in table \'ClinicalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalTable.ImageLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ClinicalParameter {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalTable.ClinicalParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClinicalParameter\' in table \'ClinicalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalTable.ClinicalParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] CentralPressureWaveform {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalTable.CentralPressureWaveformColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CentralPressureWaveform\' in table \'ClinicalTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableClinicalTable.CentralPressureWaveformColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RawWaveformsChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalTable.RawWaveformsChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RawWaveformsChart\' in table \'ClinicalTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalTable.RawWaveformsChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RawMultiWaveformsChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalTable.RawMultiWaveformsChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RawMultiWaveformsChart\' in table \'ClinicalTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableClinicalTable.RawMultiWaveformsChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageLogoNull() {
                return this.IsNull(this.tableClinicalTable.ImageLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageLogoNull() {
                this[this.tableClinicalTable.ImageLogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClinicalParameterNull() {
                return this.IsNull(this.tableClinicalTable.ClinicalParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClinicalParameterNull() {
                this[this.tableClinicalTable.ClinicalParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCentralPressureWaveformNull() {
                return this.IsNull(this.tableClinicalTable.CentralPressureWaveformColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCentralPressureWaveformNull() {
                this[this.tableClinicalTable.CentralPressureWaveformColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRawWaveformsChartNull() {
                return this.IsNull(this.tableClinicalTable.RawWaveformsChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRawWaveformsChartNull() {
                this[this.tableClinicalTable.RawWaveformsChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRawMultiWaveformsChartNull() {
                return this.IsNull(this.tableClinicalTable.RawMultiWaveformsChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRawMultiWaveformsChartNull() {
                this[this.tableClinicalTable.RawMultiWaveformsChartColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PatientTableRow : global::System.Data.DataRow {
            
            private PatientTableDataTable tablePatientTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PatientTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatientTable = ((PatientTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageLogo {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImageLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageLogo\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImageLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageHumanLogo {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImageHumanLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageHumanLogo\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImageHumanLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] SpSlider {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.SpSliderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpSlider\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.SpSliderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] DpSlider {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.DpSliderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DpSlider\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.DpSliderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] HrSlider {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.HrSliderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HrSlider\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.HrSliderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageSpChart {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImageSpChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageSpChart\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImageSpChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageApChart {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImageApChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageApChart\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImageApChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImagePpChart {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImagePpChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImagePpChart\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImagePpChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageAixChart {
                get {
                    try {
                        return ((byte[])(this[this.tablePatientTable.ImageAixChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageAixChart\' in table \'PatientTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientTable.ImageAixChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageLogoNull() {
                return this.IsNull(this.tablePatientTable.ImageLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageLogoNull() {
                this[this.tablePatientTable.ImageLogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageHumanLogoNull() {
                return this.IsNull(this.tablePatientTable.ImageHumanLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageHumanLogoNull() {
                this[this.tablePatientTable.ImageHumanLogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpSliderNull() {
                return this.IsNull(this.tablePatientTable.SpSliderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpSliderNull() {
                this[this.tablePatientTable.SpSliderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDpSliderNull() {
                return this.IsNull(this.tablePatientTable.DpSliderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDpSliderNull() {
                this[this.tablePatientTable.DpSliderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrSliderNull() {
                return this.IsNull(this.tablePatientTable.HrSliderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrSliderNull() {
                this[this.tablePatientTable.HrSliderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageSpChartNull() {
                return this.IsNull(this.tablePatientTable.ImageSpChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageSpChartNull() {
                this[this.tablePatientTable.ImageSpChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageApChartNull() {
                return this.IsNull(this.tablePatientTable.ImageApChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageApChartNull() {
                this[this.tablePatientTable.ImageApChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagePpChartNull() {
                return this.IsNull(this.tablePatientTable.ImagePpChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagePpChartNull() {
                this[this.tablePatientTable.ImagePpChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageAixChartNull() {
                return this.IsNull(this.tablePatientTable.ImageAixChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageAixChartNull() {
                this[this.tablePatientTable.ImageAixChartColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClinicalAnalysisTableRow : global::System.Data.DataRow {
            
            private ClinicalAnalysisTableDataTable tableClinicalAnalysisTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClinicalAnalysisTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClinicalAnalysisTable = ((ClinicalAnalysisTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageLogo {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageLogo\' in table \'ClinicalAnalysisTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageSpChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageSpChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageSpChart\' in table \'ClinicalAnalysisTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageSpChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImagePpChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImagePpChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImagePpChart\' in table \'ClinicalAnalysisTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImagePpChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageDpMapChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageDpMapChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageDpMapChart\' in table \'ClinicalAnalysisTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageDpMapChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageHeartRateChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageHeartRateChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageHeartRateChart\' in table \'ClinicalAnalysisTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageHeartRateChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageApChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageApChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageApChart\' in table \'ClinicalAnalysisTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageApChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageAixChart {
                get {
                    try {
                        return ((byte[])(this[this.tableClinicalAnalysisTable.ImageAixChartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageAixChart\' in table \'ClinicalAnalysisTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClinicalAnalysisTable.ImageAixChartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageLogoNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageLogoNull() {
                this[this.tableClinicalAnalysisTable.ImageLogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageSpChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageSpChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageSpChartNull() {
                this[this.tableClinicalAnalysisTable.ImageSpChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagePpChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImagePpChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagePpChartNull() {
                this[this.tableClinicalAnalysisTable.ImagePpChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageDpMapChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageDpMapChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageDpMapChartNull() {
                this[this.tableClinicalAnalysisTable.ImageDpMapChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageHeartRateChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageHeartRateChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageHeartRateChartNull() {
                this[this.tableClinicalAnalysisTable.ImageHeartRateChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageApChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageApChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageApChartNull() {
                this[this.tableClinicalAnalysisTable.ImageApChartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageAixChartNull() {
                return this.IsNull(this.tableClinicalAnalysisTable.ImageAixChartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageAixChartNull() {
                this[this.tableClinicalAnalysisTable.ImageAixChartColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuickStartTableRow : global::System.Data.DataRow {
            
            private QuickStartTableDataTable tableQuickStartTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickStartTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuickStartTable = ((QuickStartTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageLogo {
                get {
                    try {
                        return ((byte[])(this[this.tableQuickStartTable.ImageLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageLogo\' in table \'QuickStartTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickStartTable.ImageLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ImageDump {
                get {
                    try {
                        return ((byte[])(this[this.tableQuickStartTable.ImageDumpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageDump\' in table \'QuickStartTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickStartTable.ImageDumpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageLogoNull() {
                return this.IsNull(this.tableQuickStartTable.ImageLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageLogoNull() {
                this[this.tableQuickStartTable.ImageLogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageDumpNull() {
                return this.IsNull(this.tableQuickStartTable.ImageDumpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageDumpNull() {
                this[this.tableQuickStartTable.ImageDumpColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClinicalTableRowChangeEvent : global::System.EventArgs {
            
            private ClinicalTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableRowChangeEvent(ClinicalTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PatientTableRowChangeEvent : global::System.EventArgs {
            
            private PatientTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableRowChangeEvent(PatientTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClinicalAnalysisTableRowChangeEvent : global::System.EventArgs {
            
            private ClinicalAnalysisTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableRowChangeEvent(ClinicalAnalysisTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClinicalAnalysisTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuickStartTableRowChangeEvent : global::System.EventArgs {
            
            private QuickStartTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableRowChangeEvent(QuickStartTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickStartTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591