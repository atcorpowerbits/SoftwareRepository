  Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.resources - Embedded, ContainedInManifestFile, 
  Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.resources - Embedded, ContainedInManifestFile, 
  Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.resources - Embedded, ContainedInManifestFile, 
Assembly Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Assembly Microsoft.Practices.EnterpriseLibrary.Common, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=None
Assembly System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a: 
	hash=SHA1, flags=None
Assembly Microsoft.Practices.Unity.Interception, Version=2.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=None
Assembly System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Assembly System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a: 
	hash=SHA1, flags=None
Assembly System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Assembly Microsoft.Practices.ServiceLocation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=None
Assembly Microsoft.Practices.Unity, Version=2.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=None
Assembly System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String ExceptionPolicyName 'get set' : 
  Methods:
    get_ExceptionPolicyName(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionPolicyName(String): PrivateScope, Public, HideBySig, SpecialName
    GetRegistrations(String): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingConfigurationSourceBuilderExtensions: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    ConfigureExceptionHandling(IConfigurationSourceBuilder): PrivateScope, Public, Static, HideBySig
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
  Methods:
    GivenPolicyWithName(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
  Methods:
    ForExceptionType(Type): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    ForExceptionType(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
  Methods:
    ThenDoNothing(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    ThenNotifyRethrow(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    ThenThrowNewException(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
  Properties:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData CurrentExceptionTypeData 'get ' : 
  Methods:
    get_CurrentExceptionTypeData(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetRegistrations(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData]
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData
  Properties:
    System.String TypeName 'get set' : 
    System.Collections.Specialized.NameValueCollection Attributes 'get ' : 
  Methods:
    get_TypeName(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_TypeName(String): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Attributes(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    SetAttributeValue(String, String): PrivateScope, Public, HideBySig
    GetRegistrations(String): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomHandlerLoggingConfigurationBuilderExtensions: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    HandleCustom(IExceptionConfigurationAddExceptionHandlers, Type): PrivateScope, Public, Static, HideBySig
    HandleCustom(IExceptionConfigurationAddExceptionHandlers): PrivateScope, Public, Static, HideBySig
    HandleCustom(IExceptionConfigurationAddExceptionHandlers, Type, NameValueCollection): PrivateScope, Public, Static, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension
  Properties:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData CurrentExceptionTypeData 'get ' : 
  Methods:
    get_CurrentExceptionTypeData(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider
  Fields:
    System.String SectionName = exceptionHandling : Public, Static, Literal, HasDefault
  Properties:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData] ExceptionPolicies 'get ' : 
  Methods:
    GetExceptionHandlingSettings(IConfigurationSource): PrivateScope, Public, Static, HideBySig
    get_ExceptionPolicies(): PrivateScope, Public, HideBySig, SpecialName
    GetRegistrations(IConfigurationSource): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetUpdatedRegistrations(IConfigurationSource): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData] ExceptionTypes 'get ' : 
  Methods:
    get_ExceptionTypes(): PrivateScope, Public, HideBySig, SpecialName
    GetRegistration(IConfigurationSource): PrivateScope, Public, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Type, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.String, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String Name 'get set' : 
    System.Type Type 'get set' : 
    System.String TypeName 'get set' : 
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction PostHandlingAction 'get set' : 
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData] ExceptionHandlers 'get ' : 
  Methods:
    get_Name(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Name(String): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Type(): PrivateScope, Public, HideBySig, SpecialName
    set_Type(Type): PrivateScope, Public, HideBySig, SpecialName
    get_TypeName(): PrivateScope, Public, HideBySig, SpecialName
    set_TypeName(String): PrivateScope, Public, HideBySig, SpecialName
    get_PostHandlingAction(): PrivateScope, Public, HideBySig, SpecialName
    set_PostHandlingAction(PostHandlingAction): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionHandlers(): PrivateScope, Public, HideBySig, SpecialName
    GetRegistration(String): PrivateScope, Public, HideBySig
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
  Methods:
    UsingMessage(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    UsingResourceMessage(Type, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationReplaceWithProvider: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
Interface Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWrapWithProvider: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName
    Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers
    Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.String ProviderTypePropertyName = type : Public, Static, Literal, HasDefault
    System.String AttributesPropertyName = attributes : Public, Static, Literal, HasDefault
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings]
    Void .ctor(System.Collections.Generic.IDictionary`2[System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.String PoliciesKeyName = exceptionPolicies : Public, Static, Literal, HasDefault
    System.String PolicyTypesPropertyName = exceptionTypes : Public, Static, Literal, HasDefault
    System.String PolicyTypePostHandlingActionPropertyName = postHandlingAction : Public, Static, Literal, HasDefault
    System.String PolicyTypeHandlersPropertyName = exceptionHandlers : Public, Static, Literal, HasDefault
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.String ExceptionMessagePropertyName = exceptionMessage : Public, Static, Literal, HasDefault
    System.String ExceptionMessageResourceTypePropertyName = exceptionMessageResourceType : Public, Static, Literal, HasDefault
    System.String ExceptionMessageResourceNamePropertyName = exceptionMessageResourceName : Public, Static, Literal, HasDefault
    System.String ReplaceExceptionTypePropertyName = replaceExceptionType : Public, Static, Literal, HasDefault
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.String ExceptionMessagePropertyName = exceptionMessage : Public, Static, Literal, HasDefault
    System.String ExceptionMessageResourceTypePropertyName = exceptionMessageResourceType : Public, Static, Literal, HasDefault
    System.String ExceptionMessageResourceNamePropertyName = exceptionMessageResourceName : Public, Static, Literal, HasDefault
    System.String WrapExceptionTypePropertyName = wrapExceptionType : Public, Static, Literal, HasDefault
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.String, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String ExceptionMessage 'get set' : 
    System.String ExceptionMessageResourceName 'get set' : 
    System.String ExceptionMessageResourceType 'get set' : 
    System.Type ReplaceExceptionType 'get set' : 
    System.String ReplaceExceptionTypeName 'get set' : 
  Methods:
    get_ExceptionMessage(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessage(String): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionMessageResourceName(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessageResourceName(String): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionMessageResourceType(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessageResourceType(String): PrivateScope, Public, HideBySig, SpecialName
    get_ReplaceExceptionType(): PrivateScope, Public, HideBySig, SpecialName
    set_ReplaceExceptionType(Type): PrivateScope, Public, HideBySig, SpecialName
    get_ReplaceExceptionTypeName(): PrivateScope, Public, HideBySig, SpecialName
    set_ReplaceExceptionTypeName(String): PrivateScope, Public, HideBySig, SpecialName
    GetRegistrations(String): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    ReplaceWith(IExceptionConfigurationAddExceptionHandlers): PrivateScope, Public, Static, HideBySig
    ReplaceWith(IExceptionConfigurationAddExceptionHandlers, Type): PrivateScope, Public, Static, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Unity.ExceptionHandlingBlockExtension: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit (Obsolete)
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.String, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String ExceptionMessage 'get set' : 
    System.String ExceptionMessageResourceType 'get set' : 
    System.String ExceptionMessageResourceName 'get set' : 
    System.Type WrapExceptionType 'get set' : 
    System.String WrapExceptionTypeName 'get set' : 
  Methods:
    get_ExceptionMessage(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessage(String): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionMessageResourceType(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessageResourceType(String): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionMessageResourceName(): PrivateScope, Public, HideBySig, SpecialName
    set_ExceptionMessageResourceName(String): PrivateScope, Public, HideBySig, SpecialName
    get_WrapExceptionType(): PrivateScope, Public, HideBySig, SpecialName
    set_WrapExceptionType(Type): PrivateScope, Public, HideBySig, SpecialName
    get_WrapExceptionTypeName(): PrivateScope, Public, HideBySig, SpecialName
    set_WrapExceptionTypeName(String): PrivateScope, Public, HideBySig, SpecialName
    GetRegistrations(String): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    WrapWith(IExceptionConfigurationAddExceptionHandlers): PrivateScope, Public, Static, HideBySig
    WrapWith(IExceptionConfigurationAddExceptionHandlers, Type): PrivateScope, Public, Static, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Properties:
    System.Exception Exception 'get ' : 
    System.Guid HandlingInstanceId 'get ' : 
    System.Collections.Specialized.NameValueCollection AdditionalInfo 'get ' : 
  Methods:
    get_Exception(): PrivateScope, Public, HideBySig, SpecialName
    get_HandlingInstanceId(): PrivateScope, Public, HideBySig, SpecialName
    get_AdditionalInfo(): PrivateScope, Public, HideBySig, SpecialName
    Format(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandingInstaller: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.Configuration.Install.Installer
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException: AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
  :System.Exception
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Methods:
    HandleException(Exception, String, Exception&(Out)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    HandleException(Exception, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Process(Action, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Process(Func`1, TResult, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Process(Func`1, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager
    Void .ctor(System.Collections.Generic.IEnumerable`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl], Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IDictionary`2[System.String,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IDictionary`2[System.String,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl], Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    HandleException(Exception, String): PrivateScope, Public, Virtual, HideBySig
    HandleException(Exception, String, Exception&(Out)): PrivateScope, Public, Virtual, HideBySig
    Process(Action, String): PrivateScope, Public, Virtual, HideBySig
    Process(Func`1, TResult, String): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Microsoft.Practices.ServiceLocation.IServiceLocator): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Interface Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Methods:
    FireExceptionHandlingErrorOccurred(String, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener
    Void .ctor(Boolean, Boolean, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider
  Methods:
    LogConfigurationError(Exception, String): PrivateScope, Public, HideBySig
    LogInternalError(String, String): PrivateScope, Public, HideBySig
    FireExceptionHandlingErrorOccurred(String, String): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    HandleException(Exception, String): PrivateScope, Public, Static, HideBySig
    HandleException(Exception, String, Exception&(Out)): PrivateScope, Public, Static, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
    Void .ctor(System.Type, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction, System.Collections.Generic.IEnumerable`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Type, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction, System.Collections.Generic.IEnumerable`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler], Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Type ExceptionType 'get set' : 
  Methods:
    get_ExceptionType(): PrivateScope, Public, HideBySig, SpecialName
    Handle(Exception): PrivateScope, Public, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.String, System.Collections.Generic.IEnumerable`1[Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Collections.Generic.IDictionary`2[System.Type,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String PolicyName 'get set' : 
  Methods:
    HandleException(Exception): PrivateScope, Public, HideBySig
    GetPolicyEntry(Type): PrivateScope, Public, HideBySig
    get_PolicyName(): PrivateScope, Public, HideBySig, SpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    FormatExceptionMessage(String, Guid): PrivateScope, Public, Static, HideBySig
    FormatExceptionHandlingExceptionMessage(String, Exception, Exception, Exception): PrivateScope, Public, Static, HideBySig
Interface Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Methods:
    HandleException(Exception, Guid): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Interface Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Methods:
    FireExceptionHandledEvent(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    FireExceptionHandlerExecutedEvent(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    FireExceptionHandlingErrorOccurred(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener
    Void .ctor(System.String, Boolean, Boolean, System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, Boolean, Boolean, Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider
  Methods:
    FireExceptionHandledEvent(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    FireExceptionHandlerExecutedEvent(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    FireExceptionHandlingErrorOccurred(String): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullDefaultExceptionHandlingInstrumentationProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider
  Methods:
    FireExceptionHandlingErrorOccurred(String, String): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider
  Methods:
    FireExceptionHandledEvent(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    FireExceptionHandlerExecutedEvent(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    FireExceptionHandlingErrorOccurred(String): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.Unity.InterceptionExtension.ICallHandler
  Properties:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl ExceptionPolicy 'get ' : 
    Int32 Order 'get set' : 
  Methods:
    get_ExceptionPolicy(): PrivateScope, Public, HideBySig, SpecialName
    get_Order(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    set_Order(Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Invoke(IMethodInvocation, GetNextHandlerDelegate): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.String PolicyName 'get set' : 
  Methods:
    get_PolicyName(): PrivateScope, Public, HideBySig, SpecialName
    set_PolicyName(String): PrivateScope, Public, HideBySig, SpecialName
    CreateHandler(IUnityContainer): PrivateScope, Public, Virtual, HideBySig
Struct Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction: AutoLayout, AnsiClass, Class, Public, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction None = 0 : Public, Static, Literal, HasDefault
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction NotifyRethrow = 1 : Public, Static, Literal, HasDefault
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction ThrowNewException = 2 : Public, Static, Literal, HasDefault
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    System.Resources.ResourceManager ResourceManager 'get ' : 
    System.Globalization.CultureInfo Culture 'get set' : 
    System.String AddCustomHandlerData 'get ' : 
    System.String AddExceptionTypeDisplayName 'get ' : 
    System.String AddExceptionTypeHelpText 'get ' : 
    System.String AdditionalInfo 'get ' : 
    System.String AddPolicyDisplayDescription 'get ' : 
    System.String AddPolicyDisplayName 'get ' : 
    System.String AddReplaceHandlerData 'get ' : 
    System.String AddReplaceHandlerDataDescription 'get ' : 
    System.String AddWrapHandlerData 'get ' : 
    System.String AddWrapHandlerDataDescription 'get ' : 
    System.String AttributesDescription 'get ' : 
    System.String AttributesDisplayName 'get ' : 
    System.String AuthorizationProviderTypeDescription 'get ' : 
    System.String BlockName 'get ' : 
    System.String CantSwallowNonVoidReturnMessage 'get ' : 
    System.String ChainException 'get ' : 
    System.String ConfigurationFailureCreatingPolicy 'get ' : 
    System.String ErrorHandlingExceptionMessage 'get ' : 
    System.String EventIdDisplayName 'get ' : 
    System.String ExceptionHandledHelpResource 'get ' : 
    System.String ExceptionHandlerExecutedHelpResource 'get ' : 
    System.String ExceptionHandlersDisplayName 'get ' : 
    System.String ExceptionHandlerTypeDescription 'get ' : 
    System.String ExceptionHandlerTypeDisplayName 'get ' : 
    System.String ExceptionMessageDisplayName 'get ' : 
    System.String ExceptionMessageResourceNameDisplayName 'get ' : 
    System.String ExceptionMessageResourceTypeDisplayName 'get ' : 
    System.String ExceptionNullException 'get ' : 
    System.String ExceptionPoliciesDisplayName 'get ' : 
    System.String ExceptionPolicyNotFound 'get ' : 
    System.String ExceptionStringNullOrEmpty 'get ' : 
    System.String ExceptionTypeNotException 'get ' : 
    System.String ExceptionTypesDisplayName 'get ' : 
    System.String ExceptionWasCaught 'get ' : 
    System.String FieldAccessFailed 'get ' : 
    System.String FormatterTypeNameDisplayName 'get ' : 
    System.String HelpLink 'get ' : 
    System.String InnerException 'get ' : 
    System.String LogCategoryDisplayName 'get ' : 
    System.String Message 'get ' : 
    System.String NameDisplayName 'get ' : 
    System.String OffendingException 'get ' : 
    System.String OriginalException 'get ' : 
    System.String PermissionDenied 'get ' : 
    System.String PolicyName 'get ' : 
    System.String PostHandlingActionDisplayName 'get ' : 
    System.String PriorityDisplayName 'get ' : 
    System.String PropertyAccessFailed 'get ' : 
    System.String ReplaceExceptionTypeNameDisplayName 'get ' : 
    System.String SectionDisplayName 'get ' : 
    System.String SeverityDisplayName 'get ' : 
    System.String Source 'get ' : 
    System.String StackTrace 'get ' : 
    System.String StackTraceUnavailable 'get ' : 
    System.String TitleDisplayName 'get ' : 
    System.String TotalExceptionHandlersExecutedHelpResource 'get ' : 
    System.String TotalExceptionsHandledHelpResource 'get ' : 
    System.String TypeNameDisplayName 'get ' : 
    System.String TypeString 'get ' : 
    System.String UnableToHandleException 'get ' : 
    System.String UndefinedValue 'get ' : 
    System.String UseDefaultLoggerDisplayName 'get ' : 
    System.String WrapExceptionTypeNameDisplayName 'get ' : 
  Methods:
    get_ResourceManager(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Culture(): PrivateScope, Public, Static, HideBySig, SpecialName
    set_Culture(CultureInfo): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddCustomHandlerData(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddExceptionTypeDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddExceptionTypeHelpText(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AdditionalInfo(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddPolicyDisplayDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddPolicyDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddReplaceHandlerData(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddReplaceHandlerDataDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddWrapHandlerData(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AddWrapHandlerDataDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AttributesDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AttributesDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AuthorizationProviderTypeDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_BlockName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_CantSwallowNonVoidReturnMessage(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ChainException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ConfigurationFailureCreatingPolicy(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ErrorHandlingExceptionMessage(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_EventIdDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionHandledHelpResource(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionHandlerExecutedHelpResource(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionHandlersDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionHandlerTypeDescription(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionHandlerTypeDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionMessageDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionMessageResourceNameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionMessageResourceTypeDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionNullException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionPoliciesDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionPolicyNotFound(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionStringNullOrEmpty(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionTypeNotException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionTypesDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ExceptionWasCaught(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_FieldAccessFailed(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_FormatterTypeNameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_HelpLink(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_InnerException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_LogCategoryDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Message(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_NameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_OffendingException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_OriginalException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_PermissionDenied(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_PolicyName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_PostHandlingActionDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_PriorityDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_PropertyAccessFailed(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_ReplaceExceptionTypeNameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_SectionDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_SeverityDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Source(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_StackTrace(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_StackTraceUnavailable(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TitleDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TotalExceptionHandlersExecutedHelpResource(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TotalExceptionsHandledHelpResource(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TypeNameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TypeString(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_UnableToHandleException(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_UndefinedValue(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_UseDefaultLoggerDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_WrapExceptionTypeNameDisplayName(): PrivateScope, Public, Static, HideBySig, SpecialName
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.String, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler
  Properties:
    System.Type ReplaceExceptionType 'get ' : 
    System.String ExceptionMessage 'get ' : 
  Methods:
    get_ReplaceExceptionType(): PrivateScope, Public, HideBySig, SpecialName
    get_ExceptionMessage(): PrivateScope, Public, HideBySig, SpecialName
    HandleException(Exception, Guid): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter
    Void .ctor(System.IO.TextWriter, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.IO.TextWriter, System.Exception, System.Guid): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.IO.TextWriter Writer 'get ' : 
  Methods:
    get_Writer(): PrivateScope, Public, HideBySig, SpecialName
    Format(): PrivateScope, Public, Virtual, HideBySig
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.String, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver, System.Type): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler
  Properties:
    System.Type WrapExceptionType 'get ' : 
    System.String WrapExceptionMessage 'get ' : 
  Methods:
    get_WrapExceptionType(): PrivateScope, Public, HideBySig, SpecialName
    get_WrapExceptionMessage(): PrivateScope, Public, HideBySig, SpecialName
    HandleException(Exception, Guid): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter
    Void .ctor(System.Xml.XmlWriter, System.Exception, System.Guid): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.IO.TextWriter, System.Exception, System.Guid): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Xml.XmlWriter Writer 'get ' : 
  Methods:
    get_Writer(): PrivateScope, Public, HideBySig, SpecialName
    Format(): PrivateScope, Public, Virtual, HideBySig
