{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang3081\deflangfe3081{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f37\froman\fcharset238\fprq2 Times New Roman CE;}
{\f38\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f40\froman\fcharset161\fprq2 Times New Roman Greek;}{\f41\froman\fcharset162\fprq2 Times New Roman Tur;}{\f42\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f43\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f44\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f45\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f57\fmodern\fcharset238\fprq1 Courier New CE;}
{\f58\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f60\fmodern\fcharset161\fprq1 Courier New Greek;}{\f61\fmodern\fcharset162\fprq1 Courier New Tur;}{\f62\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f63\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f64\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f65\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang3081\langfe3081\cgrid\langnp3081\langfenp3081 
\snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}
{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid3622272\rsid12676230}{\*\generator Microsoft Word 11.0.0000;}{\info{\operator Paul McBryde}{\creatim\yr2008\mo3\dy18\hr16\min48}{\revtim\yr2008\mo3\dy19\hr12\min25}{\version3}{\edmins5}
{\nofpages40}{\nofwords10382}{\nofchars59182}{\nofcharsws69426}{\vern24613}{\*\password 00000000}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\donotembedsysfont0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\rsidroot12676230 \fet0{\*\wgrffmtfilter 013f}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang3081\langfe3081\cgrid\langnp3081\langfenp3081 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12676230 //---------------------------------------------------------------------------
\par #include <vcl.h>
\par #pragma hdrstop
\par 
\par #include <stdio.h>
\par #include <config/pubserv.h>
\par #include <patient/pubserv.h>
\par #include <meas/pubserv.h>
\par #include <log/pubserv.h>
\par #include <msg/pubserv.h>
\par #include <cfr11/pubserv.h>
\par #include <scor/utils.h>
\par #include "form_splash.h"
\par #include <dbmgr/pubserv.h>
\par #include "dbmgr.h"
\par //---------------------------------------------------------------------------
\par #pragma package(smart_init)
\par #pragma resource "*.dfm"
\par 
\par const String DATETIME_DISPLAY_FORMAT = "dd mmm yyyy, hh:nn:ss";
\par const String DATE_DISPLAY_FORMAT = "dd mmm yyyy";
\par bool  dbmgr_initialised;
\par bool  dbmgr_hrv_conversion_required;
\par bool  dbmgr_audit_conversion_required;
\par bool  dbmgr_conversion_required;
\par AnsiString  dbmgr_default_path;
\par Tdbmgr_dmod *dbmgr_dmod;
\par 
\par bool dbmgr_table_exists(AnsiString table_name, bool is_copy);
\par 
\par //------------------------------------------------------------------------------
\par 
\par bool dbmgr_initialise(void)
\par \{
\par    dbmgr_initialised = false;
\par 
\par    dbmgr_default_path = CONFIG_DATA_SUBDIR +"\\\\";
\par 
\par    Application->CreateForm(__classid(Tdbmgr_dmod), &dbmgr_dmod);
\par 
\par    if (dbmgr_dmod != NULL)
\par    \{
\par       if (dbmgr_activate_database_set(dbmgr_default_path, false))
\par       \{
\par          // Convert the database if required
\par          dbmgr_conversion(frm_splash->lbl_loading, dbmgr_default_path);
\par          if (!dbmgr_conversion_required)
\par          \{
\par             dbmgr_initialised = true;
\par          \}
\par       \}
\par    \}
\par    return (dbmgr_initialised);
\par \}
\par 
\par void dbmgr_destroy(void)
\par \{
\par    if (dbmgr_dmod)
\par    \{
\par       if (dbmgr_initialised)
\par       \{
\par          if (dbmgr_dmod->tbl_patient->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_trend->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_trend->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_session->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_session->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_device_pwm->Active)
\par          \{
\par             dbmgr_dmod->tbl_device_pwm->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_patient_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_hrv->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_hrv->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_hrv_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_hrv_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_session_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_session_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_trend_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_trend_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_device_pwm_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_device_pwm_copy->Close();
\par          \}
\par          if (dbmgr_dmod->ADO_Connection_copy->Connected)
\par          \{
\par             dbmgr_dmod->ADO_Connection_copy->Connected = false;
\par          \}
\par          if (dbmgr_dmod->tbl_patient_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_audit->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_audit->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_audit->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_patient_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_audit_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_audit_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_audit_copy->Close();
\par          \}
\par 
\par          dbmgr_dmod->ADO_Connection->Connected = false;
\par          dbmgr_initialised = false;
\par       \}
\par    \}
\par \}
\par 
\par bool dbmgr_disconnect_database_set(bool is_copy)
\par \{
\par    bool disconnected = false;
\par 
\par    if (dbmgr_dmod)
\par    \{
\par       if (is_copy)
\par       \{
\par          if (dbmgr_dmod->tbl_patient_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_session_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_session_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_trend_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_trend_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_device_pwm_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_device_pwm_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_hrv_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_hrv_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_patient_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_audit_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_audit_copy->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_audit_copy->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_audit_copy->Close();
\par          \}
\par          dbmgr_dmod->ADO_Connection_copy->Connected = false;
\par          disconnected = !dbmgr_dmod->ADO_Connection_copy->Connected;;
\par       \}
\par       else
\par       \{
\par          if (dbmgr_dmod->tbl_patient->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_trend->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_trend->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwm_session->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwm_session->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_device_pwm->Active)
\par          \{
\par             dbmgr_dmod->tbl_device_pwm->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_hrv->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_hrv->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_patient_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_patient_audit->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwa_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwa_audit->Close();
\par          \}
\par          if (dbmgr_dmod->tbl_measure_pwv_audit->Active)
\par          \{
\par             dbmgr_dmod->tbl_measure_pwv_audit->Close();
\par          \}
\par          dbmgr_dmod->ADO_Connection->Connected = false;
\par          disconnected = !dbmgr_dmod->ADO_Connection->Connected;
\par       \}
\par    \}
\par    return (disconnected);
\par \}
\par 
\par bool dbmgr_activate_database_set(AnsiString the_path, bool is_copy)
\par \{
\par    AnsiString             expression;
\par    bool                   initialised = true;
\par    DBMGR_ID_TYPE          id;
\par    AnsiString             alias_path;
\par    AnsiString             connection_string;
\par    CONFIG_SYSTEM_OPTIONS  cfg_options;
\par    TADOConnection         *ado_connection;
\par    TDataSet               *data_set;
\par 
\par    id = DBMGR_PATIENT_TABLE;
\par    dbmgr_hrv_conversion_required = false;
\par    dbmgr_audit_conversion_required = false;
\par 
\par    if (is_copy)
\par    \{
\par       ado_connection = dbmgr_dmod->ADO_Connection_copy;
\par    \}
\par    else
\par    \{
\par       ado_connection = dbmgr_dmod->ADO_Connection;
\par    \}
\par 
\par    cfg_options = config_get_system_options();
\par 
\par    while (id < DBMGR_LAST_TABLE)
\par    \{
\par       dbmgr_close(id, is_copy);
\par       id = (DBMGR_ID_TYPE)(id + 1);
\par    \}
\par 
\par    alias_path = ExtractFilePath(ParamStr(0)) +the_path;
\par    ado_connection->Connected = false;
\par    alias_path = alias_path + DBMGR_DATABASE_NAME;
\par 
\par    connection_string = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +alias_path +";" +";Persist Security Info=False";
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12676230 Please remove or comment in block form [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12676230 How do I comment in block form? I would like to leave this here for future reference [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12676230 /* */ OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12676230 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12676230    //connection_string = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +alias_path +";" +";Persist Security Info=False"; // Access 2007
\par    try
\par    \{
\par       ado_connection->ConnectionString = connection_string;
\par       ado_connection->Connected = true;
\par 
\par       id = DBMGR_PATIENT_TABLE;
\par       while (id < DBMGR_LAST_TABLE && initialised)
\par       \{
\par          if (!dbmgr_perform_file_check(id, the_path, is_copy))
\par          \{
\par             if ((id == DBMGR_MEASURE_PWM_TABLE ||
\par                  id == DBMGR_MEASURE_PWM_TREND_TABLE ||
\par                  id == DBMGR_MEASURE_PWM_SESSION_TABLE ||
\par                  id == DBMGR_DEVICE_TABLE) &&
\par                 (cfg_options == CONFIG_PWA_OPTION ||
\par                  cfg_options == CONFIG_PWV_OPTION ||
\par                  cfg_options == CONFIG_PWV_ONLY_OPTION))
\par             \{
\par                log_write(SWARNING +" Database Table Does Not Exist.");
\par             \}
\par             else
\par             \{
\par                if (id == DBMGR_MEASURE_HRV_TABLE)
\par                \{
\par                   // If the HRV table does not exist
\par                   // then set the flag to perform a conversion
\par                   dbmgr_hrv_conversion_required = true;
\par                \}
\par                else if (id == DBMGR_PATIENT_AUDIT_TABLE ||
\par                         id == DBMGR_MEASURE_PWA_AUDIT_TABLE ||
\par                         id == DBMGR_MEASURE_PWV_AUDIT_TABLE)
\par                \{
\par                   // If the audit tables do not exist
\par                   // then set the flag to perform a conversion
\par                   dbmgr_audit_conversion_required = true;
\par                \}
\par                else
\par                \{
\par                   initialised = false;
\par                   MsgBox_show(TERROR,
\par                               MSG_DBMGR_ERROR,
\par                               LoadStr(MSG_DBMGR_FAIL_INIT),
\par                               MSG_DBMGR_FAIL_INIT,
\par                               LoadStr(MSG_DBMGR_FAIL_INIT));
\par                \}
\par             \}
\par             
\par          \}
\par          id = (DBMGR_ID_TYPE) (id + 1);
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par        MsgBox_show(TFATAL,
\par                    MSG_DBMGR_ERROR,
\par                    LoadStr(MSG_DBMGR_NO_DB),
\par                    MSG_DBMGR_NO_DB,
\par                    LoadStr(MSG_DBMGR_NO_DB) +exception.Message);
\par        initialised = false;
\par    \}
\par    return (initialised);
\par \}
\par 
\par bool dbmgr_perform_file_check(DBMGR_ID_TYPE  id,
\par                               AnsiString     db_path,
\par                               bool           is_copy)
\par \{
\par    bool              files_found = false;
\par    TADOTable         *table;
\par    TDataSource       *data_source;
\par    TADOConnection    *ado_conn;
\par    AnsiString        db_name;
\par    AnsiString        file_name;
\par    table = NULL;
\par    data_source = NULL;
\par    try
\par    \{
\par        switch (id)
\par        \{
\par           case DBMGR_PATIENT_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_patient_copy;
\par                 table = dbmgr_dmod->tbl_patient_copy;
\par                 ado_conn =  dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_patient;
\par                 table = dbmgr_dmod->tbl_patient;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_patient->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_patient->DataSet = dbmgr_dmod->qry_patient;
\par              \}
\par              db_name = patient_get_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_PWA_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwa_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwa_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwa;
\par                 table = dbmgr_dmod->tbl_measure_pwa;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwa->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwa->DataSet = dbmgr_dmod->qry_measure_pwa;
\par              \}
\par              db_name = meas_pwa_get_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_PWV_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwv_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwv_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwv;
\par                 table = dbmgr_dmod->tbl_measure_pwv;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwv->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwv->DataSet = dbmgr_dmod->qry_measure_pwv;
\par              \}
\par              db_name = meas_pwv_get_table_name();
\par              break;
\par 
\par            case DBMGR_MEASURE_PWM_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwm_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm;
\par                 table = dbmgr_dmod->tbl_measure_pwm;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwm->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwm->DataSet = dbmgr_dmod->qry_measure_pwm;
\par              \}
\par              db_name = meas_pwm_get_pwm_table_name();
\par              break;
\par 
\par             case DBMGR_MEASURE_PWM_TREND_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm_trend_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwm_trend_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm_trend;
\par                 table = dbmgr_dmod->tbl_measure_pwm_trend;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwm_trend->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwm_trend->DataSet = dbmgr_dmod->qry_measure_pwm_trend;
\par              \}
\par              db_name = meas_pwm_get_trend_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm_session_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwm_session_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwm_session;
\par                 table = dbmgr_dmod->tbl_measure_pwm_session;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwm_session->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwm_session->DataSet = dbmgr_dmod->qry_measure_pwm_session;
\par              \}
\par              db_name = meas_pwm_get_session_table_name();
\par              break;
\par 
\par           case DBMGR_DEVICE_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_device_pwm_copy;
\par                 table = dbmgr_dmod->tbl_device_pwm_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_device_pwm;
\par                 table = dbmgr_dmod->tbl_device_pwm;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par              \}
\par              db_name = meas_pwm_get_device_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_HRV_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_hrv_copy;
\par                 table = dbmgr_dmod->tbl_measure_hrv_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_hrv;
\par                 table = dbmgr_dmod->tbl_measure_hrv;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_hrv->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_hrv->DataSet = dbmgr_dmod->qry_measure_hrv;
\par              \}
\par              db_name = meas_hrv_get_table_name();
\par              break;
\par 
\par           case DBMGR_PATIENT_AUDIT_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_patient_audit_copy;
\par                 table = dbmgr_dmod->tbl_patient_audit_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_patient_audit;
\par                 table = dbmgr_dmod->tbl_patient_audit;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_patient_audit->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_patient_audit->DataSet = dbmgr_dmod->qry_patient_audit;
\par              \}
\par              db_name = audit_patient_get_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwa_audit_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwa_audit_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwa_audit;
\par                 table = dbmgr_dmod->tbl_measure_pwa_audit;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwa_audit->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwa_audit->DataSet = dbmgr_dmod->qry_measure_pwa_audit;
\par              \}
\par              db_name = audit_pwa_get_table_name();
\par              break;
\par 
\par           case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par              if (is_copy)
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwv_audit_copy;
\par                 table = dbmgr_dmod->tbl_measure_pwv_audit_copy;
\par                 ado_conn = dbmgr_dmod->ADO_Connection_copy;
\par              \}
\par              else
\par              \{
\par                 data_source = dbmgr_dmod->dsrc_measure_pwv_audit;
\par                 table = dbmgr_dmod->tbl_measure_pwv_audit;
\par                 ado_conn = dbmgr_dmod->ADO_Connection;
\par                 dbmgr_dmod->qry_measure_pwv_audit->Connection = ado_conn;
\par                 dbmgr_dmod->dsrc_qry_measure_pwv_audit->DataSet = dbmgr_dmod->qry_measure_pwv_audit;
\par              \}
\par              db_name = audit_pwv_get_table_name();
\par              break;
\par 
\par           default:
\par              break;
\par        \}
\par 
\par        if (table)
\par        \{
\par           table->Active = false;
\par           table->Connection = ado_conn;
\par           if (dbmgr_table_exists(db_name, is_copy))
\par           \{
\par              table->TableName = db_name;
\par              data_source->DataSet = table;
\par              files_found = true;
\par           \}
\par        \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par        MsgBox_show(TERROR,
\par                    MSG_DBMGR_ERROR,
\par                    LoadStr(MSG_DBMGR_ERROR_DB),
\par                    MSG_DBMGR_ERROR_DB,
\par                    LoadStr(MSG_DBMGR_ERROR_DB) +exception.Message);
\par        files_found = false;
\par    \}
\par    return (files_found);
\par \}
\par 
\par 
\par bool dbmgr_open(DBMGR_ID_TYPE id, bool is_copy)
\par \{
\par    TDataSet    *table;
\par    AnsiString  error_msg;
\par    bool        opened = false;
\par 
\par     if (id == 0)
\par    \{
\par       return false;
\par    \}
\par 
\par    if (dbmgr_is_open(id, is_copy))
\par    \{
\par       opened = true;
\par    \}
\par    else
\par    \{
\par       table = dbmgr_get_dataset(id, is_copy);
\par       if (table)
\par       \{
\par          try
\par          \{
\par             table->Open();
\par             if (id == DBMGR_PATIENT_TABLE)
\par             \{
\par               ((TDateField *)table->FieldByName(PATIENT_DOB))->DisplayFormat = DATE_DISPLAY_FORMAT;
\par             \}
\par             opened = true;
\par          \}
\par          catch (Exception& exception)
\par          \{
\par             MsgBox_show(TERROR,
\par                         MSG_DBMGR_ERROR,
\par                         LoadStr(MSG_DBMGR_ERROR_OPEN_TABLE),
\par                         MSG_DBMGR_ERROR_OPEN_TABLE,
\par                         LoadStr(MSG_DBMGR_ERROR_OPEN_TABLE) +exception.Message);
\par             MsgBox("WE STRONGLY RECOMMEND EXITING THE SOFTWARE\\nAND RESTARTING WINDOWS.",
\par                     SNOTIFICATION,
\par                     MB_ICONSTOP | MB_OK);
\par          \}
\par       \}
\par    \}
\par    return opened;
\par \}
\par 
\par bool dbmgr_close(DBMGR_ID_TYPE  id, bool is_copy)
\par \{
\par    TDataSet *data_set;
\par    bool     closed = false;
\par 
\par    if (id == 0)
\par    \{
\par       return false;
\par    \}
\par 
\par    data_set = dbmgr_get_dataset(id, is_copy);
\par 
\par    if (data_set)
\par    \{
\par       if (data_set->Active)
\par       \{
\par          data_set->Close();
\par          closed = true;
\par       \}
\par       else
\par       \{
\par          closed = true;
\par       \}
\par    \}
\par    return closed;
\par \}
\par 
\par 
\par bool dbmgr_is_open(DBMGR_ID_TYPE id, bool is_copy)
\par \{
\par    TDataSet *table;
\par    bool     is_open = false;
\par 
\par    table = dbmgr_get_dataset(id, is_copy);
\par 
\par    if (table)
\par    \{
\par       if (table->Active)
\par       \{
\par          is_open = true;
\par       \}
\par    \}
\par    return (is_open);
\par \}
\par 
\par TDataSet *dbmgr_get_dataset(DBMGR_ID_TYPE id, bool is_copy)
\par \{
\par    TDataSet *data_set;
\par 
\par    data_set = (TDataSet *)0;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_patient_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_patient;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwa_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwa;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwv_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwv;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm_trend_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm_trend;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm_session_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwm_session;
\par          \}
\par          break;
\par       case DBMGR_DEVICE_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_device_pwm_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_device_pwm;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_hrv_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_hrv;
\par          \}
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_patient_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_patient_audit;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwa_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwa_audit;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwv_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_set = dbmgr_dmod->tbl_measure_pwv_audit;
\par          \}
\par          break;
\par       case DBMGR_PATIENT_QUERY:
\par          data_set = dbmgr_dmod->qry_patient;
\par          break;
\par       case DBMGR_MEASURE_PWA_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwa;
\par          break;
\par       case DBMGR_MEASURE_PWV_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwv;
\par          break;
\par       case DBMGR_MEASURE_PWM_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwm;
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwm_trend;
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwm_session;
\par          break;
\par       case DBMGR_MEASURE_HRV_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_hrv;
\par          break;
\par       case DBMGR_PATIENT_AUDIT_QUERY:
\par          data_set = dbmgr_dmod->qry_patient_audit;
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwa_audit;
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_QUERY:
\par          data_set = dbmgr_dmod->qry_measure_pwv_audit;
\par          break;
\par       default:
\par          break;
\par    \}
\par    return (data_set);
\par \}
\par 
\par TDataSource *dbmgr_get_data_source(DBMGR_ID_TYPE id, bool is_copy)
\par \{
\par    TDataSource *data_source;
\par 
\par    data_source = NULL;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_patient_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_patient;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwa_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwa;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwv_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwv;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm_trend_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm_trend;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm_session_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwm_session;
\par          \}
\par          break;
\par       case DBMGR_DEVICE_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_device_pwm_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_device_pwm;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          data_source = dbmgr_dmod->dsrc_measure_hrv;
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_patient_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_patient_audit;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwa_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwa_audit;
\par          \}
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          if (is_copy)
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwv_audit_copy;
\par          \}
\par          else
\par          \{
\par             data_source = dbmgr_dmod->dsrc_measure_pwv_audit;
\par          \}
\par          break;
\par       case DBMGR_PATIENT_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_patient;
\par          break;
\par       case DBMGR_MEASURE_PWA_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwa;
\par          break;
\par       case DBMGR_MEASURE_PWV_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwv;
\par          break;
\par       case DBMGR_MEASURE_PWM_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwm;
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwm_trend;
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwm_session;
\par          break;
\par       case DBMGR_MEASURE_HRV_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_hrv;
\par          break;
\par       case DBMGR_PATIENT_AUDIT_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_patient_audit;
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwa_audit;
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_QUERY:
\par          data_source = dbmgr_dmod->dsrc_qry_measure_pwv_audit;
\par          break;
\par       default:
\par          break;
\par    \}
\par    return (data_source);
\par \}
\par 
\par bool dbmgr_table_exists(AnsiString table_name, bool is_copy)
\par \{
\par    TStrings *SL = new TStringList;
\par    int i = 0;
\par    bool exists = false;
\par 
\par    if (is_copy)
\par    \{
\par       dbmgr_dmod->ADO_Connection_copy->GetTableNames(SL, false);
\par    \}
\par    else
\par    \{
\par       dbmgr_dmod->ADO_Connection->GetTableNames(SL, false);
\par    \}
\par 
\par    i = 0;
\par    while (i < SL->Count && !exists)
\par    \{
\par       if (table_name == SL->Strings[i])
\par       \{
\par          exists = true;
\par       \}
\par       ++i;
\par    \}
\par    delete SL;
\par    return (exists);
\par \}
\par 
\par TADOQuery *dbmgr_setup_query(DBMGR_ID_TYPE     id,
\par                           DBMGR_QUERY_TYPE  qry_type,
\par                           String            field_name1,
\par                           String            field_name2,
\par                           String            field_name3,
\par                           String            value1,
\par                           String            value2,
\par                           String            value3)
\par \{
\par    TADOQuery            *qry;
\par    DBMGR_ID_TYPE     qry_id;
\par    AnsiString        qry_string = NULL;
\par    AnsiString        table_name;
\par    AnsiString        error_msg;
\par    TDataChangeEvent  dsrc_change_event;
\par    TDataSource       *qry_data_source;
\par 
\par    qry = NULL;
\par    dsrc_change_event = NULL;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          qry_id = DBMGR_PATIENT_QUERY;
\par          table_name = patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_QUERY;
\par          table_name = meas_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_QUERY;
\par          table_name = meas_pwv_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_QUERY;
\par          table_name = meas_pwm_get_pwm_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_TREND_QUERY;
\par          table_name = meas_pwm_get_trend_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_SESSION_QUERY;
\par          table_name = meas_pwm_get_session_table_name();
\par          qry_data_source = dbmgr_get_data_source(DBMGR_MEASURE_PWM_SESSION_QUERY, false);
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          qry_id = DBMGR_MEASURE_HRV_QUERY;
\par          table_name = meas_hrv_get_table_name();
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          qry_id = DBMGR_PATIENT_AUDIT_QUERY;
\par          table_name = audit_patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_AUDIT_QUERY;
\par          table_name = audit_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_AUDIT_QUERY;
\par          table_name = audit_pwv_get_table_name();
\par          break;
\par       default:
\par          qry_id = (DBMGR_ID_TYPE) 0;
\par          break;
\par    \}
\par 
\par    if (qry_id)
\par    \{
\par       if (qry_type == DBMGR_QUERY_KEY)
\par       \{
\par          if (field_name3.Length() &&
\par              value3.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" + value3;
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_DATETIME)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + ">=" + StrToInt(value1) +
\par                          " AND " + field_name1 + "<=" + StrToInt(value2);
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_PATIENT_NUMBER)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length() &&
\par              field_name2.Length())
\par          \{
\par             qry_string = "SELECT * FROM " +table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\""  +
\par                          " AND " +field_name2 + "=" + "\\"" + value2  + "\\"";
\par          \}
\par       \}
\par       if (qry_string != NULL)
\par       \{
\par          try
\par          \{
\par             qry = dynamic_cast<TADOQuery *>(dbmgr_get_dataset(qry_id, false));
\par             qry->DisableControls();
\par             qry->Close();
\par             qry->SQL->Clear();
\par             qry->SQL->Add(qry_string);
\par             qry->Open();
\par             if (id == DBMGR_MEASURE_PWA_TABLE || id == DBMGR_MEASURE_PWV_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPW_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (id == DBMGR_PATIENT_AUDIT_TABLE || id == DBMGR_MEASURE_PWA_AUDIT_TABLE || id == DBMGR_MEASURE_PWV_AUDIT_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPWA_AUDIT_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (qry_id == DBMGR_MEASURE_PWM_SESSION_QUERY)
\par             \{
\par                if (qry_data_source != NULL)
\par                \{
\par                   dsrc_change_event = qry_data_source->OnDataChange;
\par                   qry_data_source->OnDataChange = NULL;
\par                \}
\par             \}
\par             qry->EnableControls();
\par             if (qry_id == DBMGR_MEASURE_PWM_SESSION_QUERY)
\par             \{
\par                if (qry_data_source != NULL)
\par                \{
\par                   qry_data_source->OnDataChange = dsrc_change_event;
\par                \}
\par             \}
\par 
\par          \}
\par          catch (Exception& exception)
\par          \{
\par             String S = LoadStr(MSG_DBMGR_ERROR_QUERY) +table_name +" " +exception.Message;
\par             MsgBox_show(TERROR,
\par                         MSG_DBMGR_ERROR,
\par                         LoadStr(MSG_DBMGR_ERROR_QUERY),
\par                         MSG_DBMGR_ERROR_QUERY,
\par                         S);
\par          \}
\par       \}
\par    \}
\par    return (qry);
\par \}
\par 
\par TADOQuery *dbmgr_setup_query(DBMGR_ID_TYPE     id,
\par                           DBMGR_QUERY_TYPE  qry_type,
\par                           String            field_name1,
\par                           String            field_name2,
\par                           String            field_name3,
\par                           String            value1,
\par                           String            value2,
\par                           String            value3,
\par                           String            order)
\par \{
\par    TADOQuery            *qry;
\par    DBMGR_ID_TYPE     qry_id;
\par    AnsiString        qry_string = NULL;
\par    AnsiString        table_name;
\par    AnsiString        error_msg;
\par    TDataChangeEvent  dsrc_change_event;
\par    TDataSource       *qry_data_source;
\par 
\par    qry = NULL;
\par    dsrc_change_event = NULL;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          qry_id = DBMGR_PATIENT_QUERY;
\par          table_name = patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_QUERY;
\par          table_name = meas_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_QUERY;
\par          table_name = meas_pwv_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_QUERY;
\par          table_name = meas_pwm_get_pwm_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_TREND_QUERY;
\par          table_name = meas_pwm_get_trend_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_SESSION_QUERY;
\par          table_name = meas_pwm_get_session_table_name();
\par          qry_data_source = dbmgr_get_data_source(DBMGR_MEASURE_PWM_SESSION_QUERY, false);
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          qry_id = DBMGR_MEASURE_HRV_QUERY;
\par          table_name = meas_hrv_get_table_name();
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          qry_id = DBMGR_PATIENT_AUDIT_QUERY;
\par          table_name = audit_patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_AUDIT_QUERY;
\par          table_name = audit_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_AUDIT_QUERY;
\par          table_name = audit_pwv_get_table_name();
\par          break;
\par       default:
\par          qry_id = (DBMGR_ID_TYPE) 0;
\par          break;
\par    \}
\par 
\par    if (qry_id)
\par    \{
\par       if (qry_type == DBMGR_QUERY_KEY)
\par       \{
\par          if (field_name3.Length() &&
\par              value3.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" + value3 +
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_DATETIME)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + ">=" + StrToInt(value1) +
\par                          " AND " + field_name1 + "<=" + StrToInt(value2) +
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_PATIENT_NUMBER)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length() &&
\par              field_name2.Length())
\par          \{
\par             qry_string = "SELECT * FROM " +table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\""  +
\par                          " AND " +field_name2 + "=" + "\\"" + value2  + "\\"" +
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       if (qry_string != NULL)
\par       \{
\par          try
\par          \{
\par             qry = dynamic_cast<TADOQuery *>(dbmgr_get_dataset(qry_id, false));
\par             qry->DisableControls();
\par             qry->Close();
\par             qry->SQL->Clear();
\par             qry->SQL->Add(qry_string);
\par             qry->Open();
\par             if (id == DBMGR_MEASURE_PWA_TABLE || id == DBMGR_MEASURE_PWV_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPW_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (id == DBMGR_PATIENT_AUDIT_TABLE || id == DBMGR_MEASURE_PWA_AUDIT_TABLE || id == DBMGR_MEASURE_PWV_AUDIT_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPWA_AUDIT_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (qry_id == DBMGR_MEASURE_PWM_SESSION_QUERY)
\par             \{
\par                if (qry_data_source != NULL)
\par                \{
\par                   dsrc_change_event = qry_data_source->OnDataChange;
\par                   qry_data_source->OnDataChange = NULL;
\par                \}
\par             \}
\par             qry->EnableControls();
\par             if (qry_id == DBMGR_MEASURE_PWM_SESSION_QUERY)
\par             \{
\par                if (qry_data_source != NULL)
\par                \{
\par                   qry_data_source->OnDataChange = dsrc_change_event;
\par                \}
\par             \}
\par 
\par          \}
\par          catch (Exception& exception)
\par          \{
\par             String S = LoadStr(MSG_DBMGR_ERROR_QUERY) +table_name +" " +exception.Message;
\par             MsgBox_show(TERROR,
\par                         MSG_DBMGR_ERROR,
\par                         LoadStr(MSG_DBMGR_ERROR_QUERY),
\par                         MSG_DBMGR_ERROR_QUERY,
\par                         S);
\par          \}
\par       \}
\par    \}
\par    return (qry);
\par \}
\par 
\par TADOQuery *dbmgr_setup_query(DBMGR_ID_TYPE     id,
\par                           DBMGR_QUERY_TYPE  qry_type,
\par                           String            field_name1,
\par                           String            field_name2,
\par                           String            field_name3,
\par                           String            field_name4,
\par                           String            value1,
\par                           String            value2,
\par                           String            value3,
\par                           String            value4)
\par \{
\par    TADOQuery          *qry;
\par    DBMGR_ID_TYPE   qry_id;
\par    AnsiString      qry_string = NULL;
\par    AnsiString      table_name;
\par    AnsiString      error_msg;
\par 
\par    qry = NULL;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          qry_id = DBMGR_PATIENT_QUERY;
\par          table_name = patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_QUERY;
\par          table_name = meas_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_QUERY;
\par          table_name = meas_pwv_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_QUERY;
\par          table_name = meas_pwm_get_pwm_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_TREND_QUERY;
\par          table_name = meas_pwm_get_trend_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_SESSION_QUERY;
\par          table_name = meas_pwm_get_session_table_name();
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          qry_id = DBMGR_MEASURE_HRV_QUERY;
\par          table_name = meas_hrv_get_table_name();
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          qry_id = DBMGR_PATIENT_AUDIT_QUERY;
\par          table_name = audit_patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_AUDIT_QUERY;
\par          table_name = audit_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_AUDIT_QUERY;
\par          table_name = audit_pwv_get_table_name();
\par          break;
\par       default:
\par          qry_id = (DBMGR_ID_TYPE) 0;
\par          break;
\par    \}
\par 
\par    if (qry_id)
\par    \{
\par       if (qry_type == DBMGR_QUERY_KEY)
\par       \{
\par          if (field_name4.Length() &&
\par              value4.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" +value3 +
\par                          " AND " + field_name4 + "=" +value4;
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_DATETIME)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + ">=" + StrToInt(value1) +
\par                          " AND " + field_name1 + "<=" + StrToInt(value2);
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_PATIENT_NUMBER)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length() &&
\par              field_name2.Length())
\par          \{
\par             qry_string = "SELECT * FROM " +table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\""  +
\par                          " AND " +field_name2 + "=" + "\\"" + value2  + "\\"";
\par          \}
\par       \}
\par       if (qry_type == DBMGR_QUERY_AUDIT_FLAG)
\par       \{
\par          if (field_name4.Length() &&
\par              value4.Length())
\par          \{
\par             // This query includes records where the audit flag is null -
\par             // old records - but does not include deleted records
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" +value3 +
\par                          " AND (" + field_name4 + "<>" + value4 +
\par                          " OR " + field_name4 + " IS NULL)";
\par          \}
\par       \}
\par       if (qry_string != NULL)
\par       \{
\par          try
\par          \{
\par             qry = dynamic_cast<TADOQuery *>(dbmgr_get_dataset(qry_id, false));
\par             qry->DisableControls();
\par             qry->Close();
\par             qry->SQL->Clear();
\par             qry->SQL->Add(qry_string);
\par             qry->Open();
\par             if (id == DBMGR_MEASURE_PWA_TABLE || id == DBMGR_MEASURE_PWV_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPW_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (id == DBMGR_PATIENT_AUDIT_TABLE || id == DBMGR_MEASURE_PWA_AUDIT_TABLE || id == DBMGR_MEASURE_PWV_AUDIT_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPWA_AUDIT_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             qry->EnableControls();
\par          \}
\par          catch (Exception& exception)
\par          \{
\par             String S = LoadStr(MSG_DBMGR_ERROR_QUERY) +table_name +" " +exception.Message;
\par             MsgBox_show(TERROR,
\par                         MSG_DBMGR_ERROR,
\par                         LoadStr(MSG_DBMGR_ERROR_QUERY),
\par                         MSG_DBMGR_ERROR_QUERY, S);
\par          \}
\par       \}
\par    \}
\par    return (qry);
\par \}
\par 
\par TADOQuery *dbmgr_setup_query(DBMGR_ID_TYPE     id,
\par                           DBMGR_QUERY_TYPE  qry_type,
\par                           String            field_name1,
\par                           String            field_name2,
\par                           String            field_name3,
\par                           String            field_name4,
\par                           String            value1,
\par                           String            value2,
\par                           String            value3,
\par                           String            value4,
\par                           String            order)
\par \{
\par    TADOQuery          *qry;
\par    DBMGR_ID_TYPE   qry_id;
\par    AnsiString      qry_string = NULL;
\par    AnsiString      table_name;
\par    AnsiString      error_msg;
\par    String          value5;
\par 
\par    qry = NULL;
\par 
\par    switch (id)
\par    \{
\par       case DBMGR_PATIENT_TABLE:
\par          qry_id = DBMGR_PATIENT_QUERY;
\par          table_name = patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_QUERY;
\par          table_name = meas_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_QUERY;
\par          table_name = meas_pwv_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_QUERY;
\par          table_name = meas_pwm_get_pwm_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_TREND_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_TREND_QUERY;
\par          table_name = meas_pwm_get_trend_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWM_SESSION_TABLE:
\par          qry_id = DBMGR_MEASURE_PWM_SESSION_QUERY;
\par          table_name = meas_pwm_get_session_table_name();
\par          break;
\par       case DBMGR_MEASURE_HRV_TABLE:
\par          qry_id = DBMGR_MEASURE_HRV_QUERY;
\par          table_name = meas_hrv_get_table_name();
\par          break;
\par       case DBMGR_PATIENT_AUDIT_TABLE:
\par          qry_id = DBMGR_PATIENT_AUDIT_QUERY;
\par          table_name = audit_patient_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWA_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWA_AUDIT_QUERY;
\par          table_name = audit_pwa_get_table_name();
\par          break;
\par       case DBMGR_MEASURE_PWV_AUDIT_TABLE:
\par          qry_id = DBMGR_MEASURE_PWV_AUDIT_QUERY;
\par          table_name = audit_pwv_get_table_name();
\par          break;
\par       default:
\par          qry_id = (DBMGR_ID_TYPE) 0;
\par          break;
\par    \}
\par 
\par    if (qry_id)
\par    \{
\par       if (qry_type == DBMGR_QUERY_KEY)
\par       \{
\par          if (field_name4.Length() &&
\par              value4.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" +value3 +
\par                          " AND " + field_name4 + "=" + value4 +
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_DATETIME)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length())
\par          \{
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + ">=" + StrToInt(value1) +
\par                          " AND " + field_name1 + "<=" + StrToInt(value2);
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_PATIENT_NUMBER)
\par       \{
\par          if (value1.Length() &&
\par              value2.Length() &&
\par              field_name1.Length() &&
\par              field_name2.Length())
\par          \{
\par             qry_string = "SELECT * FROM " +table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\""  +
\par                          " AND " +field_name2 + "=" + "\\"" + value2  + "\\"";
\par          \}
\par       \}
\par       else if (qry_type == DBMGR_QUERY_AUDIT)
\par       \{
\par          if (field_name4.Length() &&
\par              value4.Length())
\par          \{
\par             // Querying the exact datetime does not work in sql, so query
\par             // between 2 values either side of the datetime required
\par             TDateTime audit = TDateTime(value4);
\par             value4 = String(double(audit - TDateTime( 0, 0, 0, 1)));
\par             value5 = String(double(audit + TDateTime( 0, 0, 0, 1)));
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" +value3 +
\par                          " AND " + field_name4 + ">=" + value4 +
\par                          " AND " + field_name4 + "<=" + value5;
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       if (qry_type == DBMGR_QUERY_AUDIT_FLAG)
\par       \{
\par          if (field_name4.Length() &&
\par              value4.Length())
\par          \{
\par             // This query includes records where the audit flag is null -
\par             // old records - but does not include deleted records
\par             qry_string = "SELECT * FROM " + table_name +
\par                          " WHERE " + field_name1 + "=" + "\\"" + value1 + "\\"" +
\par                          " AND " + field_name2 + "=" + "\\"" + value2 + "\\"" +
\par                          " AND " + field_name3 + "=" +value3 +
\par                          " AND (" + field_name4 + "<>" + value4 +
\par                          " OR " + field_name4 + " IS NULL)" +
\par                          " ORDER BY " + order;
\par          \}
\par       \}
\par       if (qry_string != NULL)
\par       \{
\par          try
\par          \{
\par             qry = dynamic_cast<TADOQuery *>(dbmgr_get_dataset(qry_id, false));
\par             qry->DisableControls();
\par             qry->Close();
\par             qry->SQL->Clear();
\par             qry->SQL->Add(qry_string);
\par             qry->Open();
\par             if (id == DBMGR_MEASURE_PWA_TABLE || id == DBMGR_MEASURE_PWV_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPW_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             if (id == DBMGR_PATIENT_AUDIT_TABLE || id == DBMGR_MEASURE_PWA_AUDIT_TABLE || id == DBMGR_MEASURE_PWV_AUDIT_TABLE)
\par             \{
\par                ((TDateTimeField *)qry->FieldByName(MPWA_AUDIT_DATETIME))->DisplayFormat = DATETIME_DISPLAY_FORMAT;
\par             \}
\par             qry->EnableControls();
\par          \}
\par          catch (Exception& exception)
\par          \{
\par             String S = LoadStr(MSG_DBMGR_ERROR_QUERY) +table_name +" " +exception.Message;
\par             MsgBox_show(TERROR,
\par                         MSG_DBMGR_ERROR,
\par                         LoadStr(MSG_DBMGR_ERROR_QUERY),
\par                         MSG_DBMGR_ERROR_QUERY, S);
\par          \}
\par       \}
\par    \}
\par    return (qry);
\par \}
\par 
\par bool dbmgr_select_index(DBMGR_ID_TYPE  id,
\par                         AnsiString     idx_name)
\par \{
\par    TADOTable      *table;
\par    bool        reindexed = false;
\par    bool        was_open = false;
\par    AnsiString  error_msg;
\par 
\par    if (dbmgr_is_open(id, false))
\par    \{
\par       dbmgr_close(id, false);
\par       was_open = true;
\par    \}
\par 
\par    try
\par    \{
\par       table = dynamic_cast<TADOTable *>(dbmgr_get_dataset(id, false));
\par       if (table)
\par       \{
\par          table->IndexFieldNames = idx_name;
\par          reindexed = true;
\par       \}
\par    \}
\par    catch (Exception& exception)
\par    \{
\par       MsgBox_show(TERROR,
\par                   MSG_DBMGR_ERROR,
\par                   LoadStr(MSG_DBMGR_ERROR_INDEX),
\par                   MSG_DBMGR_ERROR_INDEX,
\par                   LoadStr(MSG_DBMGR_ERROR_INDEX) +exception.Message);
\par 
\par       MsgBox("WE STRONGLY RECOMMEND EXITING SphygmoCor\\nrestarting the computer and running SphygmoCor again.",
\par              SNOTIFICATION,
\par              MB_ICONSTOP | MB_OK);
\par       reindexed = false;
\par    \}
\par 
\par    if (was_open)
\par    \{
\par       dbmgr_open(id, false);
\par    \}
\par 
\par    return (reindexed);
\par \}
\par 
\par //---------------------------------------------------------------------------
\par __fastcall Tdbmgr_dmod::Tdbmgr_dmod(TComponent* Owner)
\par     : TDataModule(Owner)
\par \{
\par \}
\par //---------------------------------------------------------------------------
\par 
\par bool dbmgr_conversion(TLabel* status, AnsiString the_path)
\par \{
\par    dbmgr_conversion_required = false;
\par    bool dbmgr_conversion_successful = false;
\par 
\par    // Perform an audit conversion if the flag has been set by dbmgr_activate_database_set
\par    if (dbmgr_audit_conversion_required)
\par    \{
\par       dbmgr_conversion_required = true;
\par       MsgBox(TNOTIFICATION,
\par                MSG_DBMGR_ERROR,
\par                MSG_DBMGR_NO_AUDIT_TABLE,
\par                LoadStr(MSG_DBMGR_NO_AUDIT_TABLE));
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12676230 Does this give you the audit message for conversion even if its not cfr part 11 enabled [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12676230 Yes. Should I change it to \'93Starting Version 8.2 Database Conversion\'94? [PM]
\par Rather than mentioning version numbers be generic, please change [PH]
\par Done and Tested [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid3622272\charrsid3622272 OK [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12676230       log_write("Starting Audit Database Conversion");
\par       status->Caption = "Starting Audit Database Conversion";
\par       Application->ProcessMessages();
\par       if (dbmgr_convert_database(status, the_path))
\par       \{
\par          if (dbmgr_perform_file_check(DBMGR_PATIENT_AUDIT_TABLE, the_path, false))
\par          \{
\par             if (dbmgr_perform_file_check(DBMGR_MEASURE_PWA_AUDIT_TABLE, the_path, false))
\par             \{
\par                if (dbmgr_perform_file_check(DBMGR_MEASURE_PWV_AUDIT_TABLE, the_path, false))
\par                \{
\par                   log_write("Audit Database Conversion Successful.");
\par                   dbmgr_audit_conversion_required = false;
\par                   MsgBox_information("Audit Tables added to database.", "Conversion Successful");
\par                   dbmgr_conversion_successful = true;
\par                \}
\par                else
\par                \{
\par                   log_write("Audit Database Conversion Failed...No PWV Audit Table");
\par                   MsgBox_warning("PWV Audit Table could not be found.", "Conversion Failed");
\par                   config_set_audit_option(false);
\par                \}
\par             \}
\par             else
\par             \{
\par                log_write("Audit Database Conversion Failed...No PWA Audit Table");
\par                MsgBox_warning("PWA Audit Table could not be found.", "Conversion Failed");
\par                config_set_audit_option(false);
\par             \}
\par          \}
\par          else
\par          \{
\par             log_write("Audit Database Conversion Failed...No Patient Audit Table");
\par             MsgBox_warning("Patient Audit Table could not be found.", "Conversion Failed");
\par             config_set_audit_option(false);
\par          \}
\par       \}
\par       else
\par       \{
\par          log_write("Audit Database Conversion Failed...Could not add Audit Tables");
\par          MsgBox_warning("Audit Tables could not be added.", "Conversion Failed");
\par          config_set_audit_option(false);
\par       \}
\par    \}
\par 
\par    if (!dbmgr_conversion_required)
\par    \{
\par       dbmgr_conversion_successful = true;
\par    \}
\par    return(dbmgr_conversion_successful);
\par \}
\par 
\par bool dbmgr_convert_database(TLabel* status, AnsiString the_path)
\par \{
\par    AnsiString       source_path;
\par    AnsiString       source_pathfile;
\par    AnsiString       rename_pathfile;
\par    AnsiString       default_path;
\par    AnsiString       dest_path;
\par    ULONG        database_size;
\par    bool         converted = false;
\par    bool         converted_audit = false;
\par    bool         new_database_copied = true;
\par 
\par    // Initialise database paths and check that enough disk space is available
\par    source_path = ExtractFilePath(ParamStr(0)) + the_path;
\par    source_pathfile = source_path + DBMGR_DATABASE_NAME;
\par    rename_pathfile = source_path + DBMGR_PRE_DATABASE_NAME;
\par    default_path = ExtractFilePath(ParamStr(0)) + CONFIG_SYSTEM_SUBDIR + "\\\\" + DBMGR_DATABASE_NAME;
\par    dest_path = ExtractFilePath(ParamStr(0)) + DBMGR_DATABASE_NAME;
\par    database_size = emma_get_file_size(source_pathfile);
\par    VLONG free_space = emma_get_disk_space(dest_path[1]);
\par    if (free_space < 1.2 * database_size)
\par    \{
\par       MsgBox(TERROR, MSG_DBMGR_ERROR, MSG_DBMGR_NO_SPACE, LoadStr(MSG_DBMGR_NO_SPACE) + IntToStr((int)database_size));
\par       return false;
\par    \}
\par 
\par    // Check if there is a database in the destination directory
\par    if (FileExists(dest_path))
\par    \{
\par       if (CopyFile(default_path.c_str(), dest_path.c_str(), false) == 0)
\par       \{
\par          new_database_copied = false;
\par       \}
\par    \}
\par    else
\par    \{
\par       if (CopyFile(default_path.c_str(), dest_path.c_str(), true) == 0)
\par       \{
\par          new_database_copied = false;
\par       \}
\par    \}
\par 
\par    if (FileExists(dest_path) && new_database_copied)
\par    \{
\par       Screen->Cursor = crHourGlass;
\par       if (dbmgr_perform_simple_activation("", true))
\par       \{
\par          status->Caption = "Converting Patient Table";
\par          Application->ProcessMessages();
\par          if (dbmgr_copy_table(DBMGR_PATIENT_TABLE))
\par          \{
\par             status->Caption = "Converting PWA Table";
\par             Application->ProcessMessages();
\par             if (dbmgr_copy_table(DBMGR_MEASURE_PWA_TABLE))
\par             \{
\par                status->Caption = "Converting PWV Table";
\par                Application->ProcessMessages();
\par                if (dbmgr_copy_table(DBMGR_MEASURE_PWV_TABLE))
\par                \{
\par                   status->Caption = "Converting PWM Tables";
\par                   Application->ProcessMessages();
\par                   if (dbmgr_copy_table(DBMGR_MEASURE_PWM_SESSION_TABLE))
\par                   \{
\par                      if (dbmgr_copy_table(DBMGR_MEASURE_PWM_TREND_TABLE))
\par                      \{
\par                         if (dbmgr_copy_table(DBMGR_MEASURE_PWM_TABLE))
\par                         \{
\par                            if (dbmgr_audit_conversion_required)
\par                            \{
\par                               // When performing an audit conversion, copy the
\par                               // patient table to the audit trail because
\par                               // patient table edits are linked to the database
\par                               // and cannot be traced.
\par                               status->Caption = "Copying Patient Table";
\par                               Application->ProcessMessages();
\par                               if (dbmgr_copy_table_to_table(DBMGR_PATIENT_TABLE, DBMGR_PATIENT_AUDIT_TABLE))
\par                               \{
\par                                  converted_audit = true;
\par                               \}
\par                               else
\par                               \{
\par                                  log_write("Database Conversion Failed..Copy Patient Audit Table");
\par                               \}
\par                            \}
\par                            else
\par                            \{
\par                               converted_audit = true;
\par                            \}
\par                            if (converted_audit)
\par                            \{
\par                               if (!dbmgr_hrv_conversion_required)
\par                               \{
\par                                  // If the database already has a HRV table
\par                                  // then copy the records to the new database
\par                                  status->Caption = "Converting HRV Table";
\par                                  Application->ProcessMessages();
\par                                  if (dbmgr_copy_table(DBMGR_MEASURE_HRV_TABLE))
\par                                  \{
\par                                     converted = true;
\par                                  \}
\par                                  else
\par                                  \{
\par                                     log_write("Database Conversion Failed..Copy HRV Table");
\par                                  \}
\par                               \}
\par                               else
\par                               \{
\par                                  converted = true;
\par                               \}
\par                            \}
\par                         \}
\par                         else
\par                         \{
\par                            log_write("Database Conversion Failed..Copy PWM Table");
\par                         \}
\par                      \}
\par                      else
\par                      \{
\par                         log_write("Database Conversion Failed..Copy PWM Trend Table");
\par                      \}
\par                   \}
\par                   else
\par                   \{
\par                      log_write("Database Conversion Failed..Copy PWM Session Table");
\par                   \}
\par                \}
\par                else
\par                \{
\par                   log_write("Database Conversion Failed..Copy PWV Table");
\par                \}
\par             \}
\par             else
\par             \{
\par                log_write("Database Conversion Failed..Copy PWA Table");
\par             \}
\par          \}
\par          else
\par          \{
\par             log_write("Database Conversion Failed..Copy Patient Table");
\par          \}
\par          dbmgr_disconnect_database_set(true);
\par 
\par          if (converted)
\par          \{
\par             dbmgr_disconnect_database_set(false);
\par             if (FileExists(rename_pathfile))
\par             \{
\par                DeleteFile(rename_pathfile);
\par             \}
\par             if (RenameFile(source_pathfile, rename_pathfile))
\par             \{
\par                if (CopyFile(dest_path.c_str(), source_pathfile.c_str(), true) == 0)
\par                \{
\par                   RenameFile(rename_pathfile, source_pathfile);
\par                   converted = false;
\par                \}
\par             \}
\par             else
\par             \{
\par                converted = false;
\par                log_write("Database Conversion Failed..Rename");
\par             \}
\par             DeleteFile(dest_path);
\par             if (dbmgr_perform_simple_activation(dbmgr_default_path, true))
\par             \{
\par                dbmgr_initialised = true;
\par             \}
\par             else
\par             \{
\par                converted = false;
\par             \}
\par          \}
\par          else
\par          \{
\par             dbmgr_initialised = true;
\par          \}
\par       \}
\par       Screen->Cursor = crDefault;
\par    \}
\par    else
\par    \{
\par       dbmgr_initialised = true;
\par    \}
\par    return converted;
\par \}
\par 
\par bool dbmgr_copy_table(DBMGR_ID_TYPE  id)
\par \{
\par    TADOTable    *source_table;
\par    TADOTable    *copy_table;
\par    AnsiString   tbl_name;
\par 
\par    try
\par    \{
\par       tbl_name = "Unknown";
\par       if (dbmgr_open(id, false))
\par       \{
\par          source_table = dynamic_cast<TADOTable *>(dbmgr_get_dataset(id, false));
\par          source_table->First();
\par          tbl_name = source_table->TableName;
\par          tbl_name = tbl_name +" Copy Table ";
\par          if (dbmgr_open(id, true))
\par          \{
\par             copy_table = dynamic_cast<TADOTable *>(dbmgr_get_dataset(id, true));
\par 
\par             for (int i = 0; i < source_table->RecordCount; i++)
\par             \{
\par                copy_table->Append();
\par                for (int j = 0; j < source_table->FieldCount; j++)
\par                \{
\par                   copy_table->Fields->Fields[j]->Value = source_table->Fields->Fields[j]->Value;
\par                \}
\par                copy_table->Post();
\par                source_table->Next();
\par             \}
\par          \}
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par        MsgBox_show(TERROR,
\par                    MSG_DBREADWRITE_ERROR,
\par                    LoadStr(MSG_POST_ERROR),
\par                    MSG_POST_ERROR,
\par                    LoadStr(MSG_POST_ERROR) +tbl_name +exception.Message);
\par        return false;
\par    \}
\par    return true;
\par \}
\par 
\par bool dbmgr_copy_table_to_table(DBMGR_ID_TYPE  source, DBMGR_ID_TYPE  copy)
\par \{
\par    TADOTable    *source_table;
\par    TADOTable    *copy_table;
\par    AnsiString   tbl_name;
\par 
\par    try
\par    \{
\par       tbl_name = "Unknown";
\par       if (dbmgr_open(source, false))
\par       \{
\par          source_table = dynamic_cast<TADOTable *>(dbmgr_get_dataset(source, false));
\par          source_table->First();
\par          tbl_name = source_table->TableName;
\par          tbl_name = tbl_name +" Copy Table ";
\par          if (dbmgr_open(copy, true))
\par          \{
\par             copy_table = dynamic_cast<TADOTable *>(dbmgr_get_dataset(copy, true));
\par 
\par             for (int i = 0; i < source_table->RecordCount; i++)
\par             \{
\par                copy_table->Append();
\par                for (int j = 0; j < source_table->FieldCount; j++)
\par                \{
\par                   copy_table->Fields->Fields[j]->Value = source_table->Fields->Fields[j]->Value;
\par                \}
\par                copy_table->Post();
\par                source_table->Next();
\par             \}
\par          \}
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par        MsgBox_show(TERROR,
\par                    MSG_DBREADWRITE_ERROR,
\par                    LoadStr(MSG_POST_ERROR),
\par                    MSG_POST_ERROR,
\par                    LoadStr(MSG_POST_ERROR) +tbl_name +exception.Message);
\par        return false;
\par    \}
\par    return true;
\par \}
\par 
\par bool dbmgr_perform_simple_activation(AnsiString the_path, bool is_copy)
\par \{
\par    AnsiString             expression;
\par    bool                   activated = true;
\par    DBMGR_ID_TYPE          id;
\par    AnsiString             alias_path;
\par    AnsiString             connection_string;
\par    TADOConnection         *ado_connection;
\par 
\par    id = DBMGR_PATIENT_TABLE;
\par 
\par    if (is_copy)
\par    \{
\par       ado_connection = dbmgr_dmod->ADO_Connection_copy;
\par    \}
\par    else
\par    \{
\par       ado_connection = dbmgr_dmod->ADO_Connection;
\par    \}
\par 
\par    while (id < DBMGR_LAST_TABLE)
\par    \{
\par       dbmgr_close(id, is_copy);
\par       id = (DBMGR_ID_TYPE)(id + 1);
\par    \}
\par 
\par    alias_path = ExtractFilePath(ParamStr(0)) +the_path;
\par    ado_connection->Connected = false;
\par    alias_path = alias_path + DBMGR_DATABASE_NAME;
\par 
\par    connection_string = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +alias_path +";" +";Persist Security Info=False";
\par    try
\par    \{
\par       ado_connection->ConnectionString = connection_string;
\par       ado_connection->Connected = true;
\par 
\par       id = DBMGR_PATIENT_TABLE;
\par       while (id < DBMGR_LAST_TABLE && activated)
\par       \{
\par          dbmgr_perform_file_check(id, the_path, is_copy);
\par          id = (DBMGR_ID_TYPE) (id + 1);
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par        MsgBox_show(TFATAL,
\par                    MSG_DBMGR_ERROR,
\par                    LoadStr(MSG_DBMGR_NO_DB),
\par                    MSG_DBMGR_NO_DB,
\par                    LoadStr(MSG_DBMGR_NO_DB) +exception.Message);
\par        activated = false;
\par    \}
\par    return (activated);
\par \}
\par 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12676230 How does the code handle it when say a user has copied a Non CFR Part 11 database into the data directory and cf part 11 is enabled [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12676230 Any non CFR Part 11 database in the data directory will be converted at startup, regardless of whether CFR Part 11 is enabled or not [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12676230 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12676230 
\par }}