{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang3081\deflangfe3081{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f37\froman\fcharset238\fprq2 Times New Roman CE;}
{\f38\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f40\froman\fcharset161\fprq2 Times New Roman Greek;}{\f41\froman\fcharset162\fprq2 Times New Roman Tur;}{\f42\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f43\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f44\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f45\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f57\fmodern\fcharset238\fprq1 Courier New CE;}
{\f58\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f60\fmodern\fcharset161\fprq1 Courier New Greek;}{\f61\fmodern\fcharset162\fprq1 Courier New Tur;}{\f62\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f63\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f64\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f65\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang3081\langfe3081\cgrid\langnp3081\langfenp3081 
\snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20 \ltrch\fcs0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}
{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\rsidtbl \rsid530232\rsid12272959\rsid16411535}{\*\generator Microsoft Word 11.0.0000;}{\info{\operator Paul McBryde}{\creatim\yr2008\mo3\dy19\hr10\min11}{\revtim\yr2008\mo3\dy19\hr12\min22}{\version4}
{\edmins113}{\nofpages23}{\nofwords5947}{\nofchars33899}{\nofcharsws39767}{\vern24613}{\*\password 00000000}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\donotembedsysfont0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\rsidroot12272959 \fet0{\*\wgrffmtfilter 013f}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang3081\langfe3081\cgrid\langnp3081\langfenp3081 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 //---------------------------------------------------------------------------
\par 
\par 
\par #include <vcl.h>
\par #pragma hdrstop
\par 
\par #include <cfr11/pubserv.h>
\par #include <dbmgr/pubserv.h>
\par #include <patient/pubserv.h>
\par #include <msg/pubserv.h>
\par #include <config/pubserv.h>
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Should not have references to other objects attributes [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 Removed and Tested [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 #include <patient/source/attrib.h>
\par #include "audit.h"
\par #include "form_patient.h"
\par #include "form_main.h"
\par #include "form_report_pwa.h"
\par #include "form_report_pwv.h"
\par //---------------------------------------------------------------------------
\par 
\par #pragma package(smart_init)
\par 
\par bool audit_initialised;
\par 
\par String audit_patient_get_table_name()
\par \{
\par   return PATIENT_AUDIT;
\par \}
\par 
\par String audit_pwa_get_table_name()
\par \{
\par   return MPWA_AUDIT;
\par \}
\par 
\par String audit_pwv_get_table_name()
\par \{
\par   return MPWV_AUDIT;
\par \}
\par //---------------------------------------------------------------------------
\par bool audit_initialise()
\par \{
\par    audit_initialised = false;
\par 
\par    // Only initialise if the audit option is set
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // The databases are opened here as new records are added to the audit tables
\par    // frequently. That is, whenever data is added, edited or deleted.
\par    if (dbmgr_open(DBMGR_PATIENT_AUDIT_TABLE, false))
\par    \{
\par       if (dbmgr_open(DBMGR_MEASURE_PWA_AUDIT_TABLE, false))
\par       \{
\par          if (dbmgr_open(DBMGR_MEASURE_PWV_AUDIT_TABLE, false))
\par          \{
\par             audit_initialised = true;
\par          \}
\par       \}
\par    \}
\par    audit_initialised = true;
\par    return audit_initialised;
\par \}
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Is the audit table database open all the time [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 Yes [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Check to see whether PWV mode is enabled before opening and investigate not having PWA, PWV audit tables
\par at all times [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 Audit tables now opened and closed only when records are added. See the edit and insert procedures below. Tested [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid530232 OK Viewed changes in selected procedures [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid530232\charrsid530232 

\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 //---------------------------------------------------------------------------
\par void audit_destroy()
\par \{
\par    // The databases are cleaned up when the audit option is set
\par    if(config_get_audit_option())
\par    \{
\par       dbmgr_close(DBMGR_PATIENT_AUDIT_TABLE, false);
\par       dbmgr_close(DBMGR_MEASURE_PWA_AUDIT_TABLE, false);
\par       dbmgr_close(DBMGR_MEASURE_PWV_AUDIT_TABLE, false);
\par    \}
\par 
\par    audit_initialised = false;
\par \}
\par Reviewed
\par /*---------------------------------------------------------------------------
\par // This function maintains the audit trail when a patient record is edited
\par */
\par bool audit_patient_edit(TDataSet *patient_table)
\par \{
\par    TDataSet             *patient_audit_table;
\par    TDataSource          *patient_audit_dsrc;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, post the changes to the patient table as is.
\par    if(!config_get_audit_option())
\par    \{
\par       patient_table->Post();
\par       return true;
\par    \}
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 What if the post fails...doesnt patient edit handle this for non_audit configurations [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 If post fails, it will be caught by the patient accept function for audit and non-audit configurations. [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959    // Validate the new data and verify the operator's identity
\par    if (audit_patient_validate_record(patient_table))
\par    \{
\par       if (security_show())
\par       \{
\par          patient_audit_dsrc = dbmgr_get_data_source(DBMGR_PATIENT_AUDIT_TABLE, false);
\par          if (patient_audit_dsrc != NULL)
\par          \{
\par             patient_audit_table = dbmgr_get_dataset(DBMGR_PATIENT_AUDIT_TABLE, false);
\par             if (patient_audit_table != NULL)
\par             \{
\par                try
\par                \{
\par                   // Insert audit data to the patient table
\par                   patient_table->FieldByName(PATIENT_AUDIT_OPERATOR)->Value = security_get_username();
\par                   patient_table->FieldByName(PATIENT_AUDIT_FLAG)->AsInteger = AUDIT_MODIFIED;
\par                   patient_table->Post();
\par                   // Copy record to the audit table
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_PATIENT_AUDIT_TABLE, false))
\par                   \{}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 
\par                      }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 if (audit_copy_record(patient_table, patient_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   \{
\par                      patient_audit_table->FieldByName(PATIENT_AUDIT_DATETIME)->AsDateTime = Now();
\par                      patient_audit_table->Post();
\par                      success = true;
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \}
\par                      }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_PATIENT_AUDIT_TABLE, false);
\par }\pard \ltrpar\ql \fi720\li1440\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin1440\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                \}
\par                catch (Exception &exception)
\par                \{
\par                   MsgBox_show(TERROR,
\par                               MSG_DBREADWRITE_ERROR,
\par                               LoadStr(MSG_POST_ERROR),
\par                               MSG_POST_ERROR,
\par                               LoadStr(MSG_POST_ERROR) +patient_get_error_str() +exception.Message);
\par                   patient_audit_table->Cancel();
\par                \}
\par             \}
\par          \}
\par       \}
\par       else
\par       \{
\par          patient_table->Cancel();
\par       \}
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // This function maintains the audit trail when a patient record is created
\par */
\par bool audit_patient_insert(TDataSet *patient_table)
\par \{
\par    TDataSet     *patient_audit_table;
\par    TDataSource  *patient_audit_dsrc;
\par    bool         success = false;
\par 
\par    // If the audit option is not set, post the changes to the patient table as is.
\par    if(!config_get_audit_option())
\par    \{
\par       patient_table->Post();
\par       return true;
\par    \}
\par                                                               
\par    // Verify the Operator's identity. Data validation is not required to insert a record
\par    if (security_show())
\par    \{
\par       patient_audit_dsrc = dbmgr_get_data_source(DBMGR_PATIENT_AUDIT_TABLE, false);
\par       if (patient_audit_dsrc != NULL)
\par       \{
\par          patient_audit_table = dbmgr_get_dataset(DBMGR_PATIENT_AUDIT_TABLE, false);
\par          if (patient_audit_table != NULL)
\par          \{
\par             try
\par             \{
\par                // Insert audit data to the patient table
\par                patient_table->FieldByName(PATIENT_AUDIT_OPERATOR)->Value = security_get_username();
\par                patient_table->FieldByName(PATIENT_AUDIT_FLAG)->AsInteger = AUDIT_ORIGINAL;
\par                patient_table->Post();
\par                // Copy record to the audit table
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_PATIENT_AUDIT_TABLE, false))
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959                }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \{}{\rtlch\fcs1 \af2\afs20 
\ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   if (audit_copy_record(patient_table, patient_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                \{
\par                   patient_audit_table->FieldByName(PATIENT_AUDIT_DATETIME)->AsDateTime = Now();
\par                   patient_audit_table->Post();
\par                   success = true;
\par                \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab \tab    }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_PATIENT_AUDIT_TABLE, false);
\par }\pard \ltrpar\ql \li1440\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin1440\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959    }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par             \}
\par             catch (Exception &exception)
\par             \{
\par                MsgBox_show(TERROR,
\par                            MSG_DBREADWRITE_ERROR,
\par                            LoadStr(MSG_POST_ERROR),
\par                            MSG_POST_ERROR,
\par                            LoadStr(MSG_POST_ERROR) +patient_get_error_str() +exception.Message);
\par                patient_audit_table->Cancel();
\par             \}
\par          \}
\par       \}
\par    \}
\par    else
\par    \{
\par       patient_table->Cancel();
\par    \}
\par    return success;
\par \}
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 What if the post fails...doesnt patient insert handle this for non_audit configurations [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 If post fails, it will be caught by the patient accept function for audit and non-audit configurations. [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par /*---------------------------------------------------------------------------
\par // This function maintains the audit trail when a patient record is deleted
\par */
\par bool audit_patient_delete(TDataSet *patient_table)
\par \{
\par    TDataSet             *patient_audit_table;
\par    TDataSource          *patient_audit_dsrc;
\par    PATIENT_RECORD_TYPE  pat;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, let Patient handle the delete process
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // Validate the data and verify the operator's identity
\par    if (audit_patient_validate_record(patient_table))
\par    \{
\par       if (security_show())
\par       \{
\par          patient_audit_dsrc = dbmgr_get_data_source(DBMGR_PATIENT_AUDIT_TABLE, false);
\par          if (patient_audit_dsrc != NULL)
\par          \{
\par             patient_audit_table = dbmgr_get_dataset(DBMGR_PATIENT_AUDIT_TABLE, false);
\par             if (patient_audit_table != NULL)
\par             \{
\par                try
\par                \{
\par                   // Insert audit data to the patient table
\par                   patient_table->Edit();
\par                   patient_table->FieldByName(PATIENT_AUDIT_OPERATOR)->Value = security_get_username();
\par                   patient_table->FieldByName(PATIENT_AUDIT_FLAG)->AsInteger = AUDIT_DELETED;
\par                   patient_table->Post();
\par                   // Copy record to the audit table
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_PATIENT_AUDIT_TABLE, false))
\par                   \{
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959                      }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
if (audit_copy_record(patient_table, patient_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   \{
\par                      patient_audit_table->FieldByName(PATIENT_AUDIT_DATETIME)->AsDateTime = Now();
\par                      patient_audit_table->Post();
\par                      success = true;
\par                   \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab \tab \tab }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_PATIENT_AUDIT_TABLE, false);
\par                   \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   // Set the delete flag for the patient's PWA records
\par                   if (patient_get(&pat))
\par                   \{
\par                      TDataSet *pwa_table = dbmgr_setup_query(DBMGR_MEASURE_PWA_TABLE,
\par                                               DBMGR_QUERY_KEY,
\par                                               PATIENT_SYSTEM_ID,
\par                                               PATIENT_STUDY_ID,
\par                                               PATIENT_NO,
\par                                               pat.system_id,
\par                                               pat.study_id,
\par                                               IntToStr(pat.number),
\par                                               MPW_DATETIME);
\par                      TPWA *pwa_current = meas_get_current_pwa();
\par 
\par                      // Scroll through the patient's PWA records
\par                      for (pwa_table->First(); !pwa_table->Eof; pwa_table->Next())
\par                      \{
\par                         Application->ProcessMessages();
\par                         try
\par                         \{
\par                            if (pwa_current->Populate(pwa_table))
\par                            \{
\par                               // Set the delete flag if is has not been set already
\par                               if (pwa_current->AuditFlag != AUDIT_DELETED)
\par                               \{
\par                                  // Insert the current record into the audit trail
\par                                  pwa_table->Edit();
\par                                  if (audit_pwa_insert(pwa_current, pwa_table, AUDIT_DELETING))
\par                                  \{
\par                                     // Store audit data in the PWA table and copy into the audit trail
\par                                     pwa_current->Operator = security_get_username();
\par                                     pwa_current->Reason = "Deleted Patient";
\par                                     if (pwa_current->Store(pwa_table, false, false))
\par                                     \{
\par                                        if (!audit_pwa_edit(pwa_table))
\par                                        \{
\par                                           continue;
\par                                        \}
\par                                     \}
\par                                  \}
\par                               \}
\par                            \}
\par                         \}
\par                         catch (Exception &exception)
\par                         \{
\par                            continue; // If something wrong still continue
\par                         \}
\par                      \}
\par                   \}
\par 
\par                   // Set the delete flag for the patient's PWV records
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Dont you need to check if PWV is enabled before you do this ? [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 We could. It works either way and I guess it is unlikely a patient has PWV reports if the mode isn\rquote t enabled [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959                   if (patient_get(&pat))
\par                   \{
\par                      TDataSet *pwv_table = dbmgr_setup_query(DBMGR_MEASURE_PWV_TABLE,
\par                                               DBMGR_QUERY_KEY,
\par                                               PATIENT_SYSTEM_ID,
\par                                               PATIENT_STUDY_ID,
\par                                               PATIENT_NO,
\par                                               pat.system_id,
\par                                               pat.study_id,
\par                                               IntToStr(pat.number),
\par                                               MPW_DATETIME);
\par                      TPWV *pwv_current = meas_get_current_pwv();
\par                      // Scroll through the patient's PWV records
\par                      for (pwv_table->First(); !pwv_table->Eof; pwv_table->Next())
\par                      \{
\par                         Application->ProcessMessages();
\par                         try
\par                         \{
\par                            if (pwv_current->Populate(pwv_table))
\par                            \{
\par                               // Set the delete flag if is has not been set already
\par                               if (pwv_current->AuditFlag != AUDIT_DELETED)
\par                               \{
\par                                  // Insert the current record into the audit trail
\par                                  pwv_table->Edit();
\par                                  if (audit_pwv_insert(pwv_current, pwv_table, AUDIT_DELETING))
\par                                  \{
\par                                     // Store audit data in the PWV table and copy into the audit trail
\par                                     pwv_current->Operator = security_get_username();
\par                                     pwv_current->Reason = "Deleted Patient";
\par                                     if (pwv_current->Store(pwv_table, false, false))
\par                                     \{
\par                                        if (!audit_pwv_edit(pwv_table))
\par                                        \{
\par                                           continue;
\par                                        \}
\par                                     \}
\par                                  \}
\par                               \}
\par                            \}
\par                         \}
\par                         catch (Exception &exception)
\par                         \{
\par                            continue; // If something wrong still continue
\par                         \}
\par                      \}
\par                   \}
\par                \}
\par                catch (Exception &exception)
\par                \{
\par                   MsgBox_show(TERROR,
\par                               MSG_DBREADWRITE_ERROR,
\par                               LoadStr(MSG_POST_ERROR),
\par                               MSG_POST_ERROR,
\par                               LoadStr(MSG_POST_ERROR) +patient_get_error_str() +exception.Message);
\par                   patient_audit_table->Cancel();
\par                \}
\par             \}
\par          \}
\par       \}
\par    \}
\par    return success;
\par \}
\par 
\par //---------------------------------------------------------------------------
\par 
\par bool audit_patient_validate_record(TDataSet *patient_table)
\par \{
\par    bool valid = true;
\par 
\par    // Ensure the operator has entered a reason for any changes to the database
\par    if (patient_table == NULL)
\par    \{
\par       valid = false;
\par    \}
\par    else
\par    \{
\par       if (patient_table->FieldByName(PATIENT_AUDIT_REASON)->AsString.Length() == 0)
\par       \{
\par          valid = false;
\par          frm_patient->mm_pat_reason->SetFocus();
\par       \}
\par    \}
\par    if (!valid)
\par    \{
\par       MsgBox(MSG_AUDIT_PATIENT_CHECK_INPUT, SVALIDATION, MB_ICONEXCLAMATION);
\par    \}
\par 
\par    return (valid);
\par \}
\par 
\par bool audit_copy_record(TDataSet *source_table, TDataSet *copy_table)
\par \{
\par    // Inserts a record from the source table to the copy table
\par    copy_table->Insert();
\par    for (int j = 0; j < source_table->FieldCount; j++)
\par    \{
\par       copy_table->Fields->Fields[j]->Value = source_table->Fields->Fields[j]->Value;
\par    \}
\par 
\par    return true;
\par \}
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Shouldn't there be a try catch loop or is it handled in the calling function}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959  }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 

\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 It is handled in the calling function [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par /*---------------------------------------------------------------------------
\par // Displays the Patient audit trail
\par */
\par bool audit_patient_show()
\par \{
\par    PATIENT_RECORD_TYPE  pat;
\par    TADOQuery *patient_audit_qry;
\par    TColumn *audit_column;
\par    bool success = false;
\par 
\par    if (patient_get(&pat))
\par    \{
\par       try
\par       \{
\par          // Query the Patient Audit table
\par          Screen->Cursor = crHourGlass;
\par          patient_audit_qry = dbmgr_setup_query(DBMGR_PATIENT_AUDIT_TABLE,
\par                                              DBMGR_QUERY_KEY,
\par                                              PATIENT_SYSTEM_ID,
\par                                              PATIENT_STUDY_ID,
\par                                              PATIENT_NO,
\par                                              pat.system_id,
\par                                              pat.study_id,
\par                                              pat.number,
\par                                              PATIENT_AUDIT_DATETIME);
\par          int NofRecords = (patient_audit_qry != NULL ? patient_audit_qry->RecordCount : 0);
\par 
\par          if (NofRecords > 0)
\par          \{
\par             // Change the audit button and disable database events
\par             frm_patient->tbtn_pat_audit->Caption = AUDIT_PATIENT_BUTTON_CAPTION;
\par             frm_patient->tbtn_pat_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 AUDIT_PATIENTS_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par             frm_patient->mnuSort->Enabled = false;
\par 
\par             patient_enable_database_events(true, true);
\par 
\par             // Change the grid display
\par             frm_patient->grd_pat->Columns->Clear();
\par             audit_column = frm_patient->grd_pat->Columns->Add();
\par             audit_column->FieldName = PATIENT_AUDIT_DATETIME;
\par             audit_column->Title->Caption = AUDIT_COLUMN_TITLE;
\par             audit_column->Width = 260;
\par 
\par             patient_audit_qry->Last();
\par             frm_patient->grd_pat->SetFocus();
\par             success = true;
\par          \}
\par          else
\par          \{
\par             MsgBox(MSG_AUDIT_PATIENT_NO_REPORTS_TO_DISPLAY, SNOTIFICATION, MB_ICONINFORMATION);
\par          \}
\par       \}
\par       catch (Exception &exception)
\par       \{
\par          ;
\par       \}
\par       Screen->Cursor = crDefault;
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Displays the Patient table
\par */
\par void audit_patient_hide()
\par \{
\par    TDataSource *patient_audit_qry_dsrc;
\par    TColumn *patient_id;
\par    TColumn *date_of_birth;
\par    TColumn *first_name;
\par    TColumn *family_name;
\par 
\par    patient_audit_qry_dsrc = dbmgr_get_data_source(DBMGR_PATIENT_AUDIT_QUERY, false);
\par    if (patient_audit_qry_dsrc != NULL)
\par    \{
\par       // Change the audit button and enable database events
\par       frm_patient->tbtn_pat_audit->Caption = AUDIT_BUTTON_CAPTION;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Why is this here as a magic number [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 OK. No more magic numbers [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959       frm_patient->tbtn_pat_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
AUDIT_TRAIL_PATIENT_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par       frm_patient->mnuSort->Enabled = true;
\par 
\par       patient_enable_database_events(true, true);
\par       frm_patient->FormShow(Application);
\par 
\par       // Change the grid display
\par       frm_patient->grd_pat->Columns->Clear();
\par       patient_id = frm_patient->grd_pat->Columns->Add();
\par       patient_id->FieldName = PATIENT_ID;
\par       patient_id->Title->Caption = AUDIT_PATIENT_ID_TITLE;
\par       patient_id->Width = 64;
\par 
\par       date_of_birth = frm_patient->grd_pat->Columns->Add();
\par       date_of_birth->FieldName = PATIENT_DOB;
\par       date_of_birth->Title->Caption = AUDIT_PATIENT_DOB_TITLE;
\par       date_of_birth->Width = 69;
\par 
\par       first_name = frm_patient->grd_pat->Columns->Add();
\par       first_name->FieldName = PATIENT_FIRST_NAME;
\par       first_name->Title->Caption = AUDIT_PATIENT_FIRST_NAME_TITLE;
\par       first_name->Width = 92;
\par 
\par       family_name = frm_patient->grd_pat->Columns->Add();
\par       family_name->FieldName = PATIENT_SURNAME;
\par       family_name->Title->Caption = AUDIT_PATIENT_SURNAME_TITLE;
\par       family_name->Width = 116;
\par    \}
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Update the PWA object with audit data
\par */
\par bool audit_update_pwa(TPWA *pwa_current, String reason)
\par \{
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, let PWA handle the update process
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // Validate new data and verify the operator's identity
\par    pwa_current->Reason = reason;
\par 
\par    if (audit_pwa_validate_record(pwa_current))
\par    \{
\par       if (security_show())
\par       \{
\par          pwa_current->Operator = security_get_username();
\par          success = true;
\par       \}
\par    \}
\par 
\par    return success;
\par \}
\par 
\par bool audit_pwa_validate_record(TPWA *pwa_current)
\par \{
\par    bool valid = true;
\par 
\par    // Ensure the operator has entered a reason for any changes to the database
\par    if (pwa_current->Reason.Length() == 0)
\par    \{
\par       MsgBox_show(TWARNING,
\par                     MSG_VALIDATION_ERROR,
\par                     LoadStr(MSG_AUDIT_CHECK_INPUT),
\par                     MSG_AUDIT_CHECK_INPUT, "");
\par       valid = false;
\par    \}
\par 
\par    return (valid);
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Inserts a record into the PWA Audit trail if one does not exist already
\par */
\par bool audit_pwa_insert(TPWA *pwa_current, TDataSet *pwa_dataset, AUDIT_MODE AuditMode)
\par \{
\par    TDataSet             *pwa_audit_table;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, do not insert a record
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // If this is the original record add it to the audit trail
\par    if (pwa_current->AuditFlag == AUDIT_ORIGINAL)
\par    \{
\par       pwa_audit_table = dbmgr_get_dataset(DBMGR_MEASURE_PWA_AUDIT_TABLE, false);
\par       if (pwa_audit_table != NULL)
\par       \{
\par          try
\par          \{
\par             // Add audit data and copy to the Audit table
\par             pwa_dataset->FieldByName(MPWA_AUDIT_FLAG)->AsInteger = AUDIT_ORIGINAL;
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959             }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_MEASURE_PWA_AUDIT_TABLE, false))
\par             \{
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959                }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
if (audit_copy_record(pwa_dataset, pwa_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959             \{
\par                pwa_audit_table->FieldByName(MPWA_AUDIT_DATETIME)->AsDateTime = pwa_dataset->FieldByName(MPW_DATETIME)->AsDateTime;
\par                pwa_audit_table->Post();
\par                success = true;
\par             \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab \tab }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_MEASURE_PWA_AUDIT_TABLE, false);
\par             \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          \}
\par          catch (Exception &exception)
\par          \{
\par             MsgBox_show(TERROR,
\par                         MSG_DBREADWRITE_ERROR,
\par                         LoadStr(MSG_POST_ERROR),
\par                         MSG_POST_ERROR,
\par                         LoadStr(MSG_POST_ERROR) +GetCurrentMeasureDetails() +exception.Message);
\par             pwa_audit_table->Cancel();
\par          \}
\par       \}
\par    \}
\par    else
\par    \{
\par       success = true;
\par    \}
\par    // Set the audit flag for the record in the PWA table
\par    if (AuditMode == AUDIT_DELETING)
\par    \{
\par       pwa_current->AuditFlag = AUDIT_DELETED;
\par    \}
\par    else
\par    \{
\par       pwa_current->AuditFlag = AUDIT_MODIFIED;
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Adds the edited or deleted record to the audit trail
\par */
\par bool audit_pwa_edit(TDataSet *pwa_dataset)
\par \{
\par    TDataSet             *pwa_audit_table;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, do not insert a record
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    pwa_audit_table = dbmgr_get_dataset(DBMGR_MEASURE_PWA_AUDIT_TABLE, false);
\par    if (pwa_audit_table != NULL)
\par    \{
\par       try
\par       \{
\par          // Copy to the audit table
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_MEASURE_PWA_AUDIT_TABLE, false))
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959          }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \{
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          if (audit_copy_record(pwa_dataset, pwa_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          \{
\par             pwa_audit_table->FieldByName(MPWA_AUDIT_DATETIME)->AsDateTime = Now();
\par             pwa_audit_table->Post();
\par             success = true;
\par          \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab    }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_MEASURE_PWA_AUDIT_TABLE, false);
\par          \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959       \}
\par       catch (Exception &exception)
\par       \{
\par          MsgBox_show(TERROR,
\par                         MSG_DBREADWRITE_ERROR,
\par                         LoadStr(MSG_POST_ERROR),
\par                         MSG_POST_ERROR,
\par                         LoadStr(MSG_POST_ERROR) +GetCurrentMeasureDetails() +exception.Message);
\par          pwa_audit_table->Cancel();
\par       \}
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Allows the operator to enter a reason for deleting a report
\par */
\par bool audit_pwa_delete()
\par \{
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, let the report object handle the delete
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // Inform the operator they must enter a reason for deleting a report
\par    MsgBox(TNOTIFICATION,
\par             MSG_AUDIT,
\par             MSG_AUDIT_DELETE,
\par             LoadStr(MSG_AUDIT_DELETE));
\par 
\par    // Disable OnChange event to protect rewriting PWA
\par    frm_report_pwa->grd_report->DataSource->OnDataChange = NULL;
\par 
\par    // Call recalculate form
\par    if (meas_recalculate_show_form(frm_report_pwa,
\par                                     frm_report_pwa->report_pwa,
\par                                     frm_report_pwa->report_qry,
\par                                     frm_report_pwa->lbl_pname->Caption,
\par                                     AUDIT_DELETING))
\par    \{
\par       success = true;
\par    \}
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Where is frm_report_pwa initialised [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 In form_report_pwa.h [PM]
\par Perhaps frm_report_pwa}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959  }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
could be passed in as a variable within the function to reduce coupling [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid16411535 We would still need form_report_pwa.h as the form is of type Tfrm_report_pwa not TForm. Removing this coupling would therefore require a redesign of Audit a
nd Report [PM]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid530232\charrsid530232 Given the impact of redesigning we can live with this minor coupling OK [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959    // Restore OnChange event
\par    frm_report_pwa->grd_report->DataSource->OnDataChange = frm_report_pwa->record_changed;
\par 
\par    // Refresh grid and charts
\par    if (success)
\par    \{
\par       frm_report_pwa->record_changed(frm_report_pwa, NULL);
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Displays the PWA audit trail
\par */
\par bool audit_pwa_show()
\par \{
\par    TADOQuery *pwa_audit_qry;
\par    TDataSource *pwa_audit_qry_dsrc;
\par    bool success = false;
\par 
\par    try
\par    \{
\par       // Query the PWA Audit table
\par       Screen->Cursor = crHourGlass;
\par       pwa_audit_qry = dbmgr_setup_query(DBMGR_MEASURE_PWA_AUDIT_TABLE,
\par                                              DBMGR_QUERY_AUDIT,
\par                                              PATIENT_SYSTEM_ID,
\par                                              PATIENT_STUDY_ID,
\par                                              PATIENT_NO,
\par                                              MPW_DATETIME,
\par                                              frm_report_pwa->report_pwa->System_ID,
\par                                              frm_report_pwa->report_pwa->Study_ID,
\par                                              frm_report_pwa->report_pwa->Patient_No,
\par                                              frm_report_pwa->report_pwa->DateTime,
\par                                              MPWA_AUDIT_DATETIME);
\par 
\par       int NofRecords = (pwa_audit_qry != NULL ? pwa_audit_qry->RecordCount : 0);
\par 
\par       if (NofRecords > 0)
\par       \{
\par          // Change the audit button and disable speed buttons
\par          emma_disable_speed_buttons();
\par          frm_report_pwa->tbtn_audit->Caption = AUDIT_REPORT_BUTTON_CAPTION;
\par          frm_report_pwa->tbtn_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 AUDIT_PWA_REPORTS_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par          pwa_audit_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWA_AUDIT_QUERY, false);
\par          if (pwa_audit_qry_dsrc != NULL)
\par          \{
\par             // Change the record and grid display
\par             pwa_audit_qry_dsrc->OnDataChange = frm_report_pwa->record_changed;
\par             pwa_audit_qry_dsrc->AutoEdit = false;
\par             frm_report_pwa->grd_report->DataSource = pwa_audit_qry_dsrc;
\par             frm_report_pwa->nvg_report->DataSource = pwa_audit_qry_dsrc;
\par 
\par             frm_report_pwa->grd_report->Columns->Items[0]->FieldName = MPWA_AUDIT_DATETIME;
\par             frm_report_pwa->grd_report->Columns->Items[0]->Title->Caption = AUDIT_COLUMN_TITLE;
\par          \}
\par          pwa_audit_qry->Last();
\par          if (frm_report_pwa->grd_report->Visible)
\par          \{
\par             frm_report_pwa->grd_report->SetFocus();
\par             success = true;
\par          \}
\par       \}
\par       else
\par       \{
\par          MsgBox(MSG_AUDIT_NO_REPORTS_TO_DISPLAY, SNOTIFICATION, MB_ICONINFORMATION);
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par       ;
\par    \}
\par    Screen->Cursor = crDefault;
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Displays the PWA table
\par */
\par void audit_pwa_hide()
\par \{
\par    TDataSource *pwa_qry_dsrc;
\par    TDataSource *pwa_audit_qry_dsrc;
\par 
\par    pwa_audit_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWA_AUDIT_QUERY, false);
\par    if (pwa_audit_qry_dsrc != NULL)
\par    \{
\par       pwa_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWA_QUERY, false);
\par       if (pwa_qry_dsrc != NULL)
\par       \{
\par          // Change the audit button and enable speed buttons
\par          emma_enable_speed_buttons();
\par          frm_report_pwa->tbtn_audit->Caption = AUDIT_BUTTON_CAPTION;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Why is this here as a magic number [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par          frm_report_pwa->tbtn_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 AUDIT_TRAIL_PWA_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par 
\par          // Change the record and grid display
\par          pwa_audit_qry_dsrc->OnDataChange = NULL;
\par          frm_report_pwa->grd_report->DataSource = pwa_qry_dsrc;
\par          frm_report_pwa->nvg_report->DataSource = pwa_qry_dsrc;
\par 
\par          frm_report_pwa->grd_report->Columns->Items[0]->FieldName = MPW_DATETIME;
\par          frm_report_pwa->grd_report->Columns->Items[0]->Title->Caption = AUDIT_REPORT_TITLE;
\par 
\par          frm_report_pwa->record_changed(frm_report_pwa, NULL);
\par          
\par          if (frm_report_pwa->grd_report->Visible)
\par          \{
\par             frm_report_pwa->grd_report->SetFocus();
\par          \}
\par       \}
\par    \}
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Update the PWV object with audit data
\par */
\par bool audit_update_pwv(TPWV *pwv_current, String reason)
\par \{
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, let PWA handle the update process
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    pwv_current->Reason = reason;
\par 
\par    // Validate new data and verify the operator's identity
\par    if (audit_pwv_validate_record(pwv_current))
\par    \{
\par       if (security_show())
\par       \{
\par          pwv_current->Operator = security_get_username();
\par          success = true;
\par       \}
\par    \}
\par 
\par    return success;
\par \}
\par 
\par bool audit_pwv_validate_record(TPWV *pwv_current)
\par \{
\par    bool valid = true;
\par 
\par    // Ensure the operator has entered a reason for any changes to the database
\par    if (pwv_current->Reason.Length() == 0)
\par    \{
\par       MsgBox_show(TWARNING,
\par                     MSG_VALIDATION_ERROR,
\par                     LoadStr(MSG_AUDIT_CHECK_INPUT),
\par                     MSG_AUDIT_CHECK_INPUT, "");
\par       valid = false;
\par    \}
\par 
\par    return (valid);
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Inserts a record into the PWV Audit trail if one does not exist already
\par */
\par bool audit_pwv_insert(TPWV *pwv_current, TDataSet *pwv_dataset, AUDIT_MODE AuditMode)
\par \{
\par    TDataSet             *pwv_audit_table;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, do not insert a record
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // If this is the original record add it to the audit trail
\par    if (pwv_current->AuditFlag == AUDIT_ORIGINAL)
\par    \{
\par       pwv_audit_table = dbmgr_get_dataset(DBMGR_MEASURE_PWV_AUDIT_TABLE, false);
\par       if (pwv_audit_table != NULL)
\par       \{
\par          try
\par          \{
\par             // Add audit data and copy to the Audit table
\par             pwv_dataset->FieldByName(MPWV_AUDIT_FLAG)->AsInteger = AUDIT_ORIGINAL;
\par 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959             }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_MEASURE_PWV_AUDIT_TABLE, false))
\par             \{
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959             if (audit_copy_record(pwv_dataset, pwv_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959             \{
\par                pwv_audit_table->FieldByName(MPWV_AUDIT_DATETIME)->AsDateTime = pwv_dataset->FieldByName(MPW_DATETIME)->AsDateTime;
\par                pwv_audit_table->Post();
\par                pwv_current->AuditFlag = AUDIT_MODIFIED;
\par                success = true;
\par             \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab \tab }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_MEASURE_PWV_AUDIT_TABLE, false);
\par             \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          \}
\par          catch (Exception &exception)
\par          \{
\par             MsgBox_show(TERROR,
\par                         MSG_DBREADWRITE_ERROR,
\par                         LoadStr(MSG_POST_ERROR),
\par                         MSG_POST_ERROR,
\par                         LoadStr(MSG_POST_ERROR) +GetCurrentMeasureDetails() +exception.Message);
\par             pwv_audit_table->Cancel();
\par          \}
\par       \}
\par    \}
\par    else
\par    \{
\par       success = true;
\par    \}
\par    // Set the audit flag for the record in the PWV table
\par    if (AuditMode == AUDIT_DELETING)
\par    \{
\par       pwv_current->AuditFlag = AUDIT_DELETED;
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Adds the edited or deleted record to the audit trail
\par */
\par bool audit_pwv_edit(TDataSet *pwv_dataset)
\par \{
\par    TDataSet             *pwv_audit_table;
\par    bool                 success = false;
\par 
\par    // If the audit option is not set, do not insert a record
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    pwv_audit_table = dbmgr_get_dataset(DBMGR_MEASURE_PWV_AUDIT_TABLE, false);
\par    if (pwv_audit_table != NULL)
\par    \{
\par       try
\par       \{
\par          // Copy to the audit table
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 if (dbmgr_open(DBMGR_MEASURE_PWV_AUDIT_TABLE, false))
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959          }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 \{
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          if (audit_copy_record(pwv_dataset, pwv_audit_table))
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959          \{
\par             pwv_audit_table->FieldByName(MPWV_AUDIT_DATETIME)->AsDateTime = Now();
\par             pwv_audit_table->Post();
\par             success = true;
\par          \}
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid12272959 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 \tab    }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959\charrsid12272959 dbmgr_close(DBMGR_MEASURE_PWV_AUDIT_TABLE, false);
\par          \}}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959       \}
\par       catch (Exception &exception)
\par       \{
\par          MsgBox_show(TERROR,
\par                         MSG_DBREADWRITE_ERROR,
\par                         LoadStr(MSG_POST_ERROR),
\par                         MSG_POST_ERROR,
\par                         LoadStr(MSG_POST_ERROR) +GetCurrentMeasureDetails() +exception.Message);
\par          pwv_audit_table->Cancel();
\par       \}
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Allows the operator to enter a reason for deleting a report
\par */
\par bool audit_pwv_delete()
\par \{
\par    bool success = false;
\par 
\par    // If the audit option is not set, let the report object handle the delete
\par    if(!config_get_audit_option())
\par    \{
\par       return true;
\par    \}
\par 
\par    // Inform the operator they must enter a reason for deleting a report
\par    MsgBox(TNOTIFICATION,
\par             MSG_AUDIT,
\par             MSG_AUDIT_DELETE,
\par             LoadStr(MSG_AUDIT_DELETE));
\par 
\par    // Disable OnChange event to protect rewriting PWV
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Where is frm_report_pwv initialised [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 In form_report_pwv.h [PM]
\par Perhaps frm_report_pwv}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959  }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 could be passed i
n as a variable within the function to reduce coupling [PH]
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid16411535 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid16411535 
We would still need form_report_pwa.h as the form is of type Tfrm_report_pwa not TForm. Removing this coupling would therefore require a redesign of Audit and Report [PM]
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid530232 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid530232\charrsid530232 
Given the impact of redesigning we can live with this minor coupling OK [PH]
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959    frm_report_pwv->grd_report->DataSource->OnDataChange = NULL;
\par 
\par    // Call recalculate form
\par    if (meas_recalculate_pwv_show_form(frm_report_pwv,
\par                                     frm_report_pwv->report_pwv,
\par                                     frm_report_pwv->report_qry,
\par                                     frm_report_pwv->lbl_pname->Caption,
\par                                     AUDIT_DELETING))
\par    \{
\par       success = true;
\par    \}
\par 
\par    // Restore OnChange event
\par    frm_report_pwv->grd_report->DataSource->OnDataChange = frm_report_pwv->record_changed;
\par 
\par    // Refresh grid and charts
\par    if (success)
\par    \{
\par       frm_report_pwv->record_changed(frm_report_pwv, NULL);
\par    \}
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Displays the PWV audit trail
\par */
\par bool audit_pwv_show()
\par \{
\par    TADOQuery *pwv_audit_qry;
\par    TDataSource *pwv_audit_qry_dsrc;
\par    bool success = false;
\par 
\par    try
\par    \{
\par       // Query the PWV Audit table
\par       Screen->Cursor = crHourGlass;
\par       pwv_audit_qry = dbmgr_setup_query(DBMGR_MEASURE_PWV_AUDIT_TABLE,
\par                                              DBMGR_QUERY_AUDIT,
\par                                              PATIENT_SYSTEM_ID,
\par                                              PATIENT_STUDY_ID,
\par                                              PATIENT_NO,
\par                                              MPW_DATETIME,
\par                                              frm_report_pwv->report_pwv->System_ID,
\par                                              frm_report_pwv->report_pwv->Study_ID,
\par                                              frm_report_pwv->report_pwv->Patient_No,
\par                                              frm_report_pwv->report_pwv->DateTime,
\par                                              MPWV_AUDIT_DATETIME);
\par 
\par       int NofRecords = (pwv_audit_qry != NULL ? pwv_audit_qry->RecordCount : 0);
\par 
\par       if (NofRecords > 0)
\par       \{
\par          // Change the audit button and disable speed buttons
\par          emma_disable_speed_buttons();
\par          frm_report_pwv->tbtn_audit->Caption = AUDIT_REPORT_BUTTON_CAPTION;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par          frm_report_pwv->tbtn_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 AUDIT_PWV_REPORTS_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par          pwv_audit_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWV_AUDIT_QUERY, false);
\par          if (pwv_audit_qry_dsrc != NULL)
\par          \{
\par             // Change the record and grid display
\par             pwv_audit_qry_dsrc->OnDataChange = frm_report_pwv->record_changed;
\par             pwv_audit_qry_dsrc->AutoEdit = false;
\par             frm_report_pwv->grd_report->DataSource = pwv_audit_qry_dsrc;
\par             frm_report_pwv->nvg_report->DataSource = pwv_audit_qry_dsrc;
\par 
\par             frm_report_pwv->grd_report->Columns->Items[0]->FieldName = MPWV_AUDIT_DATETIME;
\par             frm_report_pwv->grd_report->Columns->Items[0]->Title->Caption = AUDIT_COLUMN_TITLE;
\par          \}
\par          pwv_audit_qry->Last();
\par          if (frm_report_pwv->grd_report->Visible)
\par          \{
\par             frm_report_pwv->grd_report->SetFocus();
\par             success = true;
\par          \}
\par       \}
\par       else
\par       \{
\par          MsgBox(MSG_AUDIT_NO_REPORTS_TO_DISPLAY, SNOTIFICATION, MB_ICONINFORMATION);
\par       \}
\par    \}
\par    catch (Exception &exception)
\par    \{
\par       ;
\par    \}
\par    Screen->Cursor = crDefault;
\par    return success;
\par \}
\par 
\par /*---------------------------------------------------------------------------
\par // Displays the PWV table
\par */
\par void audit_pwv_hide()
\par \{
\par    TDataSource *pwv_qry_dsrc;
\par    TDataSource *pwv_audit_qry_dsrc;
\par 
\par    pwv_audit_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWV_AUDIT_QUERY, false);
\par    if (pwv_audit_qry_dsrc != NULL)
\par    \{
\par       pwv_qry_dsrc = dbmgr_get_data_source(DBMGR_MEASURE_PWV_QUERY, false);
\par       if (pwv_qry_dsrc != NULL)
\par       \{
\par          // Change the audit button and enable speed buttons
\par          emma_enable_speed_buttons();
\par          frm_report_pwv->tbtn_audit->Caption = AUDIT_BUTTON_CAPTION;
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf6\lang1033\langfe3081\langnp1033\insrsid12272959 Why is this here as a magic number [PH]
\par }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf11\lang1033\langfe3081\langnp1033\insrsid12272959 OK [PH]}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 
\par          frm_report_pwv->tbtn_audit->ImageIndex = }{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 \f2\fs20\cf2\lang1033\langfe3081\langnp1033\insrsid12272959 AUDIT_TRAIL_PWV_IMAGE}{\rtlch\fcs1 \af2\afs20 \ltrch\fcs0 
\f2\fs20\lang1033\langfe3081\langnp1033\insrsid12272959 ;
\par 
\par          // Change the record and grid display
\par          pwv_audit_qry_dsrc->OnDataChange = NULL;
\par          frm_report_pwv->grd_report->DataSource = pwv_qry_dsrc;
\par          frm_report_pwv->nvg_report->DataSource = pwv_qry_dsrc;
\par 
\par          frm_report_pwv->grd_report->Columns->Items[0]->FieldName = MPW_DATETIME;
\par          frm_report_pwv->grd_report->Columns->Items[0]->Title->Caption = AUDIT_REPORT_TITLE;
\par 
\par          frm_report_pwv->record_changed(frm_report_pwv, NULL);
\par          
\par          if (frm_report_pwv->grd_report->Visible)
\par          \{
\par             frm_report_pwv->grd_report->SetFocus();
\par          \}
\par       \}
\par    \}
\par \}
\par 
\par }}